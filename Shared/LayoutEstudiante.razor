@inherits LayoutComponentBase
@using EduSoft.Data
@using EduSoft.Services
@inject AuthService AuthService
@inject DashboardEstudianteService DashboardEstudianteService
@inject NavigationManager Navigation

<div class="layout-container">
    <header class="top-bar">
        <h2>EduSoft</h2>

        <div class="top-center">
            <button class="btn-ai" @onclick="IrEduAI">
                <i class="fas fa-robot"></i> Edu AI
            </button>
        </div>

        <div class="top-buttons">
            <button class="btn-action toggle-sidebar-btn" @onclick="ToggleSidebar" tabindex="1">
                <i class="fas fa-bars"></i>
            </button>
            <button class="btn-action home-btn" @onclick="IrDashboardEstudiante" tabindex="2">
                <i class="fas fa-home"></i>
            </button>
            <button class="btn-action logout-btn" @onclick="CerrarSesion" tabindex="3">
                <i class="fas fa-sign-out-alt"></i>
            </button>
        </div>
    </header>

    <nav class="sub-nav">
        <div class="nav-item" @onclick="IrTareas" tabindex="4">
            <i class="fas fa-tasks"></i>
            <span>Tareas</span>
        </div>
        <div class="nav-item" @onclick="IrExamenes" tabindex="5">
            <i class="fas fa-file-alt"></i>
            <span>Exámenes</span>
        </div>
        <div class="nav-item" @onclick="IrNotas" tabindex="6">
            <i class="fas fa-clipboard-check"></i>
            <span>Notas</span>
        </div>
    </nav>

    <div class="content-container">
        <main class="main-content">
            @Body
        </main>

        @if (MostrarSidebar)
        {
            <aside class="sidebar @(SidebarAnimado ? "animated" : "")">
                <h4><i class="fas fa-book-reader"></i> Mis Cursos</h4>
                <button class="btn-add-class" @onclick="AbrirModal" tabindex="4">
                    <i class="fas fa-plus"></i> Unirse a Clase
                </button>
                <ul class="course-list">
                    @foreach (var clase in Clases.Select((valor, i) => (valor, i)))
                    {
                        <li class="course-item">
                            <a href="javascript:void(0);" @onclick="() => IrAClase(clase.valor.Id)" tabindex="@((clase.i + 5) * 10)">
                                <i class="fas fa-book"></i> @clase.valor.Nombre
                            </a>
                        </li>
                    }
                </ul>
            </aside>
        }
    </div>
</div>

@if (MostrarModal)
{
    <div class="modal-overlay">
        <div class="modal-box">
            <h2><i class="fas fa-sign-in-alt"></i> Unirse a una Clase</h2>
            <div class="modal-content">
                <input type="text" @bind="CodigoClaseIngresado" class="modal-input" placeholder="Código de Clase" tabindex="100" />
                <div class="modal-actions">
                    <button @onclick="UnirseAClase" class="modal-button confirm" tabindex="101">
                        <i class="fas fa-check"></i> Unirse
                    </button>
                    <button @onclick="CerrarModal" class="modal-button cancel" tabindex="102">
                        <i class="fas fa-times"></i> Cancelar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f4f6f9;
        margin: 0;
        padding: 0;
    }

    .layout-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
    }

    .top-bar {
        background: linear-gradient(135deg, #0052D4, #4364F7, #6FB1FC);
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        font-size: 1.4rem;
        font-weight: bold;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        position: relative;
    }

    .top-center {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
    }

    .btn-ai {
        background: white;
        color: #0052D4;
        border: none;
        padding: 6px 16px;
        font-weight: bold;
        font-size: 0.9rem;
        border-radius: 50px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .btn-ai:hover {
            background: #e0ebff;
            transform: scale(1.05);
        }

    .sub-nav {
        display: flex;
        justify-content: center;
        gap: 40px;
        padding: 15px;
        background: linear-gradient(135deg, #329fff, #3f78ff);
        border-bottom-left-radius: 20px;
        border-bottom-right-radius: 20px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .nav-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        color: white;
        font-size: 1rem;
        cursor: pointer;
        transition: transform 0.2s ease, color 0.3s;
    }

        .nav-item:hover {
            transform: scale(1.1);
            color: #ffd700;
        }

        .nav-item i {
            font-size: 1.5rem;
            margin-bottom: 5px;
        }

    .top-buttons {
        display: flex;
        gap: 10px;
    }

    .btn-action {
        background: none;
        border: none;
        color: white;
        font-size: 1.4rem;
        cursor: pointer;
        transition: transform 0.2s ease, color 0.3s;
    }

        .btn-action:hover {
            transform: scale(1.1);
        }

    .toggle-sidebar-btn:hover {
        color: #FFD700;
    }

    .logout-btn:hover {
        color: #ff4d4d;
    }

    .home-btn:hover {
        color: #ffcc00;
    }

    .content-container {
        display: flex;
        flex: 1;
        padding: 20px;
        gap: 20px;
    }

    .main-content {
        flex: 3;
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .sidebar {
        flex: 1;
        background: #fff;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    .animated {
        opacity: 0;
        transform: scale(0.9);
        animation: fadeIn 0.3s ease-in-out forwards;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: scale(0.9);
        }

        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    .sidebar h4 {
        color: #0052D4;
        font-size: 1.2rem;
        margin-bottom: 15px;
    }

    .btn-add-class {
        background: #329fff;
        color: white;
        padding: 10px;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        cursor: pointer;
        width: 100%;
        margin-bottom: 15px;
        transition: background 0.3s, transform 0.2s;
    }

        .btn-add-class:hover {
            background: #0088ff;
            transform: scale(1.05);
        }

    .course-list {
        list-style: none;
        padding: 0;
    }

    .course-item {
        background: #eef1f7;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 8px;
        transition: background 0.3s ease;
    }

        .course-item a {
            text-decoration: none;
            color: #0052D4;
            font-weight: bold;
            display: block;
        }

        .course-item:hover {
            background: #d0e0fc;
        }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-box {
        background: white;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        width: 350px;
        text-align: center;
    }

    .modal-content {
        margin-top: 15px;
    }

    .modal-input {
        width: 100%;
        padding: 10px;
        border-radius: 8px;
        border: 1px solid #ccc;
        font-size: 1rem;
    }

    .modal-actions {
        margin-top: 20px;
        display: flex;
        justify-content: space-between;
    }

    .modal-button {
        border: none;
        padding: 10px 15px;
        border-radius: 8px;
        font-size: 1rem;
        cursor: pointer;
        width: 48%;
        transition: background 0.3s, transform 0.2s;
    }

    .confirm {
        background: #0052D4;
        color: white;
    }

        .confirm:hover {
            background: #003c9d;
            transform: scale(1.05);
        }

    .cancel {
        background: #E74C3C;
        color: white;
    }

        .cancel:hover {
            background: #C0392B;
            transform: scale(1.05);
        }

    :focus {
        outline: 2px solid #007acc !important;
        box-shadow: 0 0 5px #007acc;
    }
</style>

@code {
    private Usuario? UsuarioAutenticado;
    private List<Clase> Clases = new();
    private bool MostrarSidebar = true;
    private bool MostrarModal = false;
    private string CodigoClaseIngresado = "";
    private bool SidebarAnimado = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        UsuarioAutenticado = await AuthService.VerificarSesion();
        if (UsuarioAutenticado != null)
        {
            Clases = await DashboardEstudianteService.GetClasesPorEstudianteAsync(UsuarioAutenticado.Id);
            StateHasChanged();
        }
    }

    private void IrAClase(int claseId) => Navigation.NavigateTo($"/clase-estudiante/{claseId}");
    private void IrDashboardEstudiante() => Navigation.NavigateTo("/dashboard-estudiante");
    private void IrTareas() => Navigation.NavigateTo("/tareas-estudiante");
    private void IrExamenes() => Navigation.NavigateTo("/examenes-estudiante");
    private void IrNotas() => Navigation.NavigateTo("/notas-estudiante");
    private void IrEduAI() => Navigation.NavigateTo("/eduai");

    private async Task UnirseAClase()
    {
        bool exito = await DashboardEstudianteService.UnirseAClaseAsync(UsuarioAutenticado.Id, CodigoClaseIngresado);
        if (exito)
        {
            Clases = await DashboardEstudianteService.GetClasesPorEstudianteAsync(UsuarioAutenticado.Id);
        }
        CerrarModal();
    }

    private void AbrirModal() => MostrarModal = true;
    private void CerrarModal() => MostrarModal = false;

    private void ToggleSidebar()
    {
        MostrarSidebar = !MostrarSidebar;
        if (MostrarSidebar) SidebarAnimado = true;
    }

    private async Task CerrarSesion()
    {
        await AuthService.EliminarSesion(UsuarioAutenticado.Id);
        UsuarioAutenticado = null;
        Navigation.NavigateTo("/", true);
    }
}
