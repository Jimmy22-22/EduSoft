@page "/eduaimaestro"
@using EduSoft.Data
@using EduSoft.Services
@inject CHATBOT.Services.GeminiService ChatService
@inject AuthService AuthService
@inject IJSRuntime JSRuntime
@layout LayoutMaestro
@inject EduSoft.Services.EduAiContextMaestroBuilder EduAiContextMaestroBuilder
@inject EduAiHistoryService EduAiHistoryService
@inject IJSRuntime JS

@if (UsuarioAutenticado == null)
{
    <p class="no-session">Debes iniciar sesión como maestro para usar EDU AI.</p>
}
else
{
    <div class="chat-wrapper">
        <div class="chat-title">
            <i class="fas fa-robot"></i> EDU AI - Asistente Docente
        </div>

        <div class="chat-box" @ref="ChatScrollRef">
            @foreach (var msg in mensajes)
            {
                var esUsuario = msg.Role == "user";
                <div class="message @(esUsuario ? "user" : "assistant")">
                    <div class="bubble">
                        <div class="bubble-header">
                            <i class="fas @(esUsuario ? "fa-user" : "fa-robot")"></i>
                            <span>@(esUsuario ? "Tú" : "EDU AI")</span>
                        </div>
                        <div class="bubble-body">@msg.Content</div>
                    </div>
                </div>
            }
            @if (Escribiendo)
            {
                <div class="message assistant">
                    <div class="bubble typing-indicator">
                        <div class="bubble-header">
                            <i class="fas fa-robot"></i> <span>EDU AI</span>
                        </div>
                        <div class="bubble-body"><em>Escribiendo...</em></div>
                    </div>
                </div>
            }

            <div id="scroll-anchor"></div>
        </div>

        @if (Grabando)
        {
            <div class="grabando-indicador">
                <i class="fas fa-microphone"></i> Grabando...
            </div>
        }

        <div class="chat-input-area">
            <input @bind="mensajeUsuario" @bind:event="oninput" placeholder="Escribe tu mensaje..." class="chat-input" />
            <button @onclick="EnviarMensaje" class="chat-send-button" title="Enviar">
                <i class="fas fa-paper-plane"></i>
            </button>
            <button @onclick="IniciarGrabacion" class="mic-button" title="Hablar">
                <i class="fas fa-microphone"></i>
            </button>
        </div>
    </div>
}

<style>
    .no-session {
        color: #d84315;
        text-align: center;
        margin-top: 30px;
        font-weight: bold;
    }

    .chat-wrapper {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 170px);
        background: linear-gradient(135deg, #eef3fd, #dcefff);
        padding: 20px;
        border-radius: 14px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
    }

    .chat-title {
        text-align: center;
        font-size: 1.7rem;
        color: #3d5afe;
        margin-bottom: 15px;
        font-weight: bold;
    }

    .chat-box {
        flex: 1;
        overflow-y: auto;
        padding: 18px;
        background: white;
        border-radius: 12px;
        box-shadow: inset 0 0 6px rgba(0,0,0,0.05);
    }

    .message {
        display: flex;
        margin-bottom: 14px;
    }

        .message.user {
            justify-content: flex-end;
        }

    .bubble {
        background-color: #f0f4ff;
        padding: 12px 16px;
        border-radius: 16px;
        max-width: 65%;
        box-shadow: 0 3px 6px rgba(0,0,0,0.07);
    }

    .message.user .bubble {
        background-color: #cceeff;
        color: #114c73;
        border-radius: 20px 20px 20px 0;
        text-align: right;
    }

    .bubble-header {
        font-weight: bold;
        font-size: 0.85rem;
        margin-bottom: 6px;
        color: #3949ab;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .message.user .bubble-header {
        justify-content: flex-end;
        color: #2b7acb;
    }

    .bubble-body {
        font-size: 1rem;
        white-space: pre-wrap;
    }

    .chat-input-area {
        display: flex;
        align-items: center;
        margin-top: 18px;
        gap: 12px;
        padding: 10px 14px;
        background: white;
        border: 1px solid #cce0f5;
        border-radius: 14px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.05);
    }

    .chat-input {
        flex: 1;
        padding: 12px;
        font-size: 1rem;
        border-radius: 10px;
        border: none;
        outline: none;
        background: transparent;
        color: #333;
    }

    .chat-send-button {
        background: #3d5afe;
        color: white;
        padding: 12px 16px;
        font-size: 1.2rem;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        transition: transform 0.2s ease, background 0.3s ease;
    }

        .chat-send-button:hover {
            background: #304ffe;
            transform: scale(1.1);
        }

        .chat-send-button:active {
            transform: scale(0.95);
        }

    .mic-button {
        background: #00bcd4;
        color: white;
        padding: 12px 16px;
        font-size: 1.2rem;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        transition: transform 0.2s ease, background 0.3s ease;
    }

        .mic-button:hover {
            background: #00acc1;
            transform: scale(1.1);
        }

    .grabando-indicador {
        display: flex;
        align-items: center;
        justify-content: center;
        background: #e1f5fe;
        color: #0277bd;
        font-weight: 500;
        padding: 6px 12px;
        margin: 8px 0;
        border-radius: 8px;
        font-size: 0.9rem;
        animation: pulse 1s infinite;
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
            opacity: 1;
        }

        50% {
            transform: scale(1.05);
            opacity: 0.6;
        }

        100% {
            transform: scale(1);
            opacity: 1;
        }
    }

    .typing-indicator .bubble-body {
        font-style: italic;
        color: #666;
    }

</style>

@code {
    private string mensajeUsuario = "";
    private List<ChatMessage> mensajes = new();
    private ElementReference ChatScrollRef;
    private Usuario? UsuarioAutenticado;
    private DotNetObjectReference<EduAiMaestro>? dotNetHelper;
    private bool Grabando = false;
    private bool Escribiendo = false;

    protected override async Task OnInitializedAsync()
    {
        UsuarioAutenticado = await AuthService.VerificarSesion();
        if (UsuarioAutenticado != null)
        {
            mensajes = await EduAiHistoryService.ObtenerConversacionAsync(UsuarioAutenticado.Id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await ScrollToBottom(); // 👈 Esto lo hace al abrir la vista
        }
    }

    private async Task IniciarGrabacion()
    {
        if (dotNetHelper == null)
            dotNetHelper = DotNetObjectReference.Create(this);

        await JS.InvokeVoidAsync("voiceRecognition.startRecognition", dotNetHelper);
    }

    private async Task EnviarMensajeDirecto(string mensaje)
    {
        if (!string.IsNullOrWhiteSpace(mensaje) && UsuarioAutenticado != null)
        {
            Escribiendo = true;         // 👈 Mostrar "Escribiendo..."
            StateHasChanged();          // 🔄 Refrescar UI para mostrarlo
            await Task.Delay(50);       // ⏳ Dar tiempo al render
            await ScrollToBottom();     // 👇 Bajar el scroll al fondo para que se vea

            var contexto = await EduAiContextMaestroBuilder.ConstruirContextoMaestroAsync(UsuarioAutenticado.Nombre);
            bool esPrimera = !mensajes.Any();

            var respuesta = await ChatService.SendMessageAsync(mensaje, contexto, esPrimera);

            await EduAiHistoryService.GuardarMensajeAsync(UsuarioAutenticado.Id, "user", mensaje);
            await EduAiHistoryService.GuardarMensajeAsync(UsuarioAutenticado.Id, "assistant", respuesta);

            mensajes = await EduAiHistoryService.ObtenerConversacionAsync(UsuarioAutenticado.Id);

            Escribiendo = false;        // 👈 Ocultar "Escribiendo..."
            StateHasChanged();          // 🔄 Refrescar UI para quitarlo

            await JSRuntime.InvokeVoidAsync("hablarTexto", respuesta); // 🗣️ Voz de la IA

            await Task.Delay(100);      // ⏳ Esperar para asegurar render
            await ScrollToBottom();     // 👇 Bajar de nuevo tras recibir respuesta
        }
    }


    private async Task EnviarMensaje()
    {
        if (!string.IsNullOrWhiteSpace(mensajeUsuario) && UsuarioAutenticado != null)
        {
            Escribiendo = true;
            StateHasChanged();              // 🔄 Mostrar “Escribiendo...”
            await Task.Delay(50);           // ⏳ Deja que renderice
            await ScrollToBottom();         // 👇 Para que se vea el indicador

            var contexto = await EduAiContextMaestroBuilder.ConstruirContextoMaestroAsync(UsuarioAutenticado.Nombre);
            bool esPrimera = !mensajes.Any();

            var respuesta = await ChatService.SendMessageAsync(mensajeUsuario, contexto, esPrimera);

            Escribiendo = false;
            StateHasChanged();              // 🔄 Quitar “Escribiendo...”

            await EduAiHistoryService.GuardarMensajeAsync(UsuarioAutenticado.Id, "user", mensajeUsuario);
            await EduAiHistoryService.GuardarMensajeAsync(UsuarioAutenticado.Id, "assistant", respuesta);

            mensajeUsuario = string.Empty;
            mensajes = await EduAiHistoryService.ObtenerConversacionAsync(UsuarioAutenticado.Id);

            await JSRuntime.InvokeVoidAsync("hablarTexto", respuesta); // 🗣️ Habla con voz femenina
            await Task.Delay(100);                                     // ⏳ Asegura que todo se renderice
            await ScrollToBottom();                                    // 👇 Baja al final con la nueva respuesta
        }
    }



    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollChatToBottom");
    }

    private async Task DetenerGrabacion()
    {
        await JS.InvokeVoidAsync("voiceRecognition.stopRecognition");
    }

    [JSInvokable]
    public async Task TextoDesdeVoz(string texto)
    {
        await EnviarMensajeDirecto(texto);

        mensajeUsuario = ""; // por si acaso
        await Task.Delay(100); // 👈 espera a que la UI se actualice
        await ScrollToBottom(); // 👈 vuelve a hacer scroll
        StateHasChanged(); // 🔄 asegura render
    }

    [JSInvokable]
    public Task MostrarGrabando()
    {
        Grabando = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task OcultarGrabando()
    {
        Grabando = false;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
