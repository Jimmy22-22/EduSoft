@page "/test-servicios"
@using EduSoft.Services
@inject TestSuiteService TestSuiteService
@layout LayoutEstudiante

<style>
    .test-container {
        max-width: 900px;
        margin: auto;
        padding: 2rem;
    }

    .test-card {
        background-color: #ffffff;
        border-radius: 1rem;
        box-shadow: 0 5px 25px rgba(0, 0, 0, 0.08);
        padding: 2rem;
    }

    .test-title {
        font-size: 2rem;
        font-weight: bold;
        color: #004085;
        text-align: center;
        margin-bottom: 1.5rem;
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #343a40;
        margin-top: 2rem;
        margin-bottom: 1rem;
        border-bottom: 2px solid #dee2e6;
        padding-bottom: 0.5rem;
    }

    .result-item {
        padding: 0.75rem 1rem;
        border-radius: 0.5rem;
        margin-bottom: 0.5rem;
        background-color: #f8f9fa;
        display: flex;
        align-items: center;
    }

    .result-icon {
        margin-right: 0.75rem;
        font-size: 1.2rem;
    }

    .ok {
        color: #28a745;
    }

    .fail {
        color: #dc3545;
    }

    .loading-area {
        text-align: center;
        padding: 2rem 1rem;
    }

    .loading-area .spinner-border {
        width: 3rem;
        height: 3rem;
    }

    .badge-ok {
        background-color: #d4edda;
        color: #155724;
    }

    .badge-fail {
        background-color: #f8d7da;
        color: #721c24;
    }
</style>

<div class="test-container">
    <div class="test-card">
        <div class="test-title">
            <i class="fas fa-vials me-2"></i> Resultados de Pruebas del Sistema
        </div>

        @if (Resultados == null)
        {
            <div class="loading-area">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
                <p class="mt-3">Ejecutando pruebas internas... Por favor espera.</p>
            </div>
        }
        else
        {
            string? seccionActual = null;

            foreach (var resultado in Resultados)
            {
                if (!resultado.Contains(":"))
                {
                    seccionActual = resultado.Trim();
                    <div class="section-title">
                        <i class="fas fa-folder-open me-2"></i> @seccionActual
                    </div>
                }
                else
                {
                    // NUEVA LÓGICA PARA DETECTAR RESULTADOS REALES
                    var esOk = !(
                        resultado.Contains("Fallo", StringComparison.OrdinalIgnoreCase) ||
                        resultado.Contains("Error", StringComparison.OrdinalIgnoreCase) ||
                        resultado.Contains("Vacio", StringComparison.OrdinalIgnoreCase) ||
                        resultado.Contains("No activa", StringComparison.OrdinalIgnoreCase)
                    );

                    <div class="result-item">
                        <i class="fas @(esOk ? "fa-check-circle ok result-icon" : "fa-times-circle fail result-icon")"></i>
                        <span>@resultado</span>
                    </div>
                }
            }
        }
    </div>
</div>

@code {
    private List<string>? Resultados;

    protected override async Task OnInitializedAsync()
    {
        Resultados = await TestSuiteService.EjecutarPruebasAsync();
    }
}
