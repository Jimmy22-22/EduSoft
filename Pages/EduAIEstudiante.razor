@page "/eduai"
@using EduSoft.Data
@using EduSoft.Services
@inject CHATBOT.Services.GeminiService ChatService
@inject AuthService AuthService
@layout LayoutEstudiante
@inject IJSRuntime JSRuntime
@inject EduAiContextEstudianteBuilder EduAiContextEstudianteBuilder


@if (UsuarioAutenticado == null)
{
    <p class="no-session">Debes iniciar sesión como estudiante para usar EDU AI.</p>
}
else
{
    <div class="chat-wrapper">
        <div class="chat-title">
            <i class="fas fa-robot"></i> EDU AI - Asistente Estudiantil
        </div>

        <div class="chat-box" @ref="ChatScrollRef">
            @foreach (var msg in mensajes)
            {
                var esUsuario = msg.Role == "user";
                <div class="message @(esUsuario ? "user" : "assistant")">
                    <div class="bubble">
                        <div class="bubble-header">
                            <i class="fas @(esUsuario ? "fa-user" : "fa-robot")"></i>
                            <span>@(esUsuario ? "Tú" : "EDU AI")</span>
                        </div>
                        <div class="bubble-body">@msg.Content</div>
                    </div>
                </div>
            }
        </div>

        <div class="chat-input-area">
            <input @bind="mensajeUsuario" @bind:event="oninput" placeholder="Escribe tu mensaje..." class="chat-input" />
            <button @onclick="EnviarMensaje" class="chat-send-button">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>
}

<style>
    .no-session {
        color: #d32f2f;
        text-align: center;
        margin-top: 30px;
        font-weight: bold;
    }

    .chat-wrapper {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 170px);
        background: #eaf3fc;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .chat-title {
        text-align: center;
        font-size: 1.6rem;
        color: #0052D4;
        margin-bottom: 15px;
        font-weight: bold;
    }

    .chat-box {
        flex: 1;
        overflow-y: auto;
        padding: 15px;
        background: #ffffff;
        border-radius: 10px;
        box-shadow: inset 0 0 4px rgba(0,0,0,0.05);
    }

    .message {
        display: flex;
        margin-bottom: 12px;
    }

        .message.user {
            justify-content: flex-end;
        }

    .bubble {
        background-color: #dbeafe;
        padding: 10px 15px;
        border-radius: 12px;
        max-width: 60%;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .message.user .bubble {
        background-color: #c7e0ff;
        color: #0a3d91;
        text-align: right;
    }

    .bubble-header {
        font-weight: bold;
        font-size: 0.9rem;
        margin-bottom: 5px;
        color: #1d3557;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .message.user .bubble-header {
        justify-content: flex-end;
        color: #0a3d91;
    }

    .bubble-body {
        font-size: 1rem;
        white-space: pre-wrap;
    }

    .chat-input-area {
        display: flex;
        align-items: center;
        margin-top: 15px;
        gap: 10px;
    }

    .chat-input {
        flex: 1;
        padding: 12px;
        font-size: 1rem;
        border-radius: 10px;
        border: 1px solid #ccc;
        outline: none;
    }

    .chat-send-button {
        background: #0052D4;
        color: white;
        padding: 12px 16px;
        font-size: 1rem;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        transition: background 0.3s ease;
    }

        .chat-send-button:hover {
            background: #003c9d;
        }

    @@media (max-width: 768px) {
        .bubble

    {
        max-width: 85%;
    }

    .chat-title {
        font-size: 1.3rem;
    }

    }
</style>

@code {
    private string mensajeUsuario = "";
    private List<ChatMessage> mensajes = new();
    private ElementReference ChatScrollRef;
    private Usuario? UsuarioAutenticado;

    protected override async Task OnInitializedAsync()
    {
        UsuarioAutenticado = await AuthService.VerificarSesion();
    }

    private async Task EnviarMensaje()
    {
        if (!string.IsNullOrWhiteSpace(mensajeUsuario) && UsuarioAutenticado != null)
        {
            var contexto = await EduAiContextEstudianteBuilder.ConstruirContextoEstudianteAsync(UsuarioAutenticado.Id);
            var respuesta = await ChatService.SendMessageAsync(mensajeUsuario, contexto);

            mensajeUsuario = string.Empty;
            mensajes.Clear();
            mensajes.AddRange(ChatService.Messages);
            await ScrollToBottom();
        }
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(100);
        await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('.chat-box').scrollTop = document.querySelector('.chat-box').scrollHeight");
    }
}
