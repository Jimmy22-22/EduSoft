@page "/horarios-maestro"
@layout LayoutMaestro

@using EduSoft.Data
@using EduSoft.Services
@inject HorarioService HorarioService
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="header-container">
    <h2 class="schedule-title">
        <i class="fas fa-calendar-alt"></i> Horarios de Clases
    </h2>

    <div class="filter-container">
        <label>Filtrar por Fecha:</label>
        <input type="date" @bind="FechaFiltro" @bind:after="async () => await CargarDatos()" class="filter-input" />
        <i class="fas fa-sync-alt reset-icon" @onclick="RestablecerFiltro" title="Restablecer"></i>
        <i class="fas fa-plus-circle add-icon" @onclick="AbrirModalAgregar" title="Agregar Horario"></i>
    </div>
</div>


@if (Horarios.Count > 0)
{
    <div class="schedule-grid">
        @foreach (var horario in Horarios)
        {
            var colorClase = ObtenerClaseColorOrdenado(horario.ClaseId);
            <div class="day-section" style="border-left: 6px solid @colorClase">
                <h3 class="day-title" style="color:@colorClase">
                    <i class="fas fa-calendar-day" style="color:@colorClase"></i> @horario.Fecha.ToString("dddd, dd MMMM yyyy")
                </h3>

                <ul class="schedule-list">
                    <li class="schedule-item" style="border-left: 6px solid @colorClase">
                        <div class="schedule-item-content">
                            <span class="time" style="color:@colorClase"><i class="fas fa-clock"></i> @horario.HoraInicio - @horario.HoraFin</span>
                            <span class="subject" style="color:@colorClase"><i class="fas fa-book"></i> @horario.NombreClase</span>
                            <span class="room" style="color:@colorClase"><i class="fas fa-door-open"></i> Aula: @horario.Aula</span>
                        </div>
                        <div class="divider" style="background:@colorClase"></div>
                        <div class="action-icons">
                            <i class="fas fa-edit edit-icon" @onclick="() => AbrirModalEditar(horario)" title="Editar"></i>
                            <i class="fas fa-trash-alt delete-icon" @onclick="() => EliminarHorario(horario.Id)" title="Eliminar"></i>
                        </div>
                    </li>
                </ul>
            </div>
        }
    </div>
}
else
{
    <p class="no-schedule"><i class="fas fa-calendar-times"></i> No tienes clases registradas en la fecha seleccionada.</p>
}

@if (MostrarModal)
{
    <div class="modal-overlay">
        <div class="modal-box enhanced-schedule">
            <div class="modal-header">
                <i class="fas fa-calendar-plus modal-icon"></i>
                <h2>@(ModoEdicion ? "Editar Horario" : "Agregar Horario")</h2>
            </div>

            <div class="modal-content">
                <div class="input-group">
                    <label>Clase:</label>
                    <select @bind="ClaseSeleccionadaId" class="modal-input enhanced-input">
                        <option value="">Selecciona una clase</option>
                        @foreach (var clase in Clases)
                        {
                            <option value="@clase.Id">@clase.Nombre</option>
                        }
                    </select>
                </div>

                <div class="input-group">
                    <label>Fecha:</label>
                    <input type="date"
                           @bind="FechaHorario"
                           class="modal-input enhanced-input"
                           min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                </div>

                <div class="input-group">
                    <label>Hora de Inicio:</label>
                    <input type="time" @bind="HoraInicioTime" class="modal-input enhanced-input" />
                </div>

                <div class="input-group">
                    <label>Hora de Fin:</label>
                    <input type="time" @bind="HoraFinTime" class="modal-input enhanced-input" />
                </div>

                <div class="input-group">
                    <label>Aula:</label>
                    <input type="text" @bind="Aula" class="modal-input enhanced-input" placeholder="Ej: Aula 101" />
                </div>

                <div class="modal-actions">
                    <button @onclick="GuardarHorario" class="modal-button confirm enhanced-btn">
                        <i class="fas fa-check-circle"></i> Guardar
                    </button>
                    <button @onclick="CerrarModal" class="modal-button cancel enhanced-btn">
                        <i class="fas fa-times-circle"></i> Cancelar
                    </button>
                </div>
            </div>
        </div>
    </div>
}


<style>
    .horarios-page {
        max-width: 960px;
        margin: 0 auto;
        padding: 20px;
        font-family: 'Segoe UI', sans-serif;
        color: #0d47a1;
    }

    .schedule-title {
        font-size: 2rem;
        text-align: center;
        color: #1565c0;
        margin-bottom: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

    .filter-container {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 15px;
        margin-bottom: 25px;
    }

    .filter-input {
        padding: 10px 14px;
        border-radius: 10px;
        border: 2px solid #90caf9;
        font-size: 1rem;
        background: #e3f2fd;
        color: #0d47a1;
    }

    .reset-icon, .add-icon {
        font-size: 1.5rem;
        color: #1976d2;
        cursor: pointer;
        transition: transform 0.3s, color 0.3s;
    }

        .reset-icon:hover, .add-icon:hover {
            color: #0d47a1;
            transform: scale(1.2);
        }

    .schedule-grid {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
    }

    .day-section {
        background: #f1f8ff;
        border: 2px solid #bbdefb;
        padding: 20px;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(33, 150, 243, 0.1);
        flex: 1 1 48%;
        max-width: 48%;
        box-sizing: border-box;
    }

    .day-title {
        font-size: 1.4rem;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .schedule-list {
        list-style: none;
        padding: 0;
    }

    .schedule-item {
        background: #ffffff;
        padding: 15px 20px;
        margin-bottom: 15px;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

        .schedule-item span {
            font-size: 1rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }

    .divider {
        height: 1px;
        background: #bbdefb;
        margin: 12px 0;
        border-radius: 4px;
    }

    .no-schedule {
        text-align: center;
        font-size: 1.1rem;
        color: #90a4ae;
        margin-top: 40px;
    }

    .action-icons {
        display: flex;
        gap: 12px;
        justify-content: flex-end;
        margin-top: 10px;
    }

    .edit-icon, .delete-icon {
        font-size: 1rem;
        padding: 10px;
        border-radius: 50%;
        background-color: white;
        border: 2px solid transparent;
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.08);
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 42px;
        height: 42px;
    }

    .edit-icon {
        color: #1565c0;
        border-color: #90caf9;
    }

    .delete-icon {
        color: #d32f2f;
        border-color: #ef9a9a;
    }

    .edit-icon:hover {
        background-color: #e3f2fd;
        transform: scale(1.1);
    }

    .delete-icon:hover {
        background-color: #ffebee;
        transform: scale(1.1);
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-box.enhanced-schedule {
        width: 400px;
        padding: 30px;
        text-align: center;
        border-radius: 18px;
        color: white;
        position: relative;
        background: linear-gradient(270deg, #64b5f6, #42a5f5, #81d4fa);
        background-size: 600% 600%;
        animation: gradientFlow 6s ease infinite;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.25), inset 0 0 12px rgba(255, 255, 255, 0.1), 0 0 0 3px rgba(255, 255, 255, 0.08);
        animation: fadeIn 0.4s ease-out;
    }

    .modal-header {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 16px;
    }

    .modal-icon {
        font-size: 2.5rem;
        color: #ffffff;
        text-shadow: 0 2px 6px rgba(0, 0, 0, 0.4);
        margin-bottom: 10px;
        animation: pulse 1s infinite alternate;
    }

    .modal-header h2 {
        font-size: 1.4rem;
        margin: 0;
        color: white;
    }

    .modal-content {
        margin-top: 10px;
    }

    .input-group {
        margin-bottom: 14px;
        text-align: left;
    }

        .input-group label {
            display: block;
            font-weight: 600;
            font-size: 0.95rem;
            margin-bottom: 5px;
            color: #ffffff;
        }

    .modal-input.enhanced-input {
        font-size: 0.95rem;
        padding: 10px;
        width: 100%;
        border-radius: 10px;
        border: 2px solid #bbdefb;
        background: #ffffff;
        color: #1e3a5f;
        transition: border 0.3s, box-shadow 0.3s;
    }

        .modal-input.enhanced-input:focus {
            border-color: #64b5f6;
            box-shadow: 0 0 6px rgba(100, 181, 246, 0.6);
            outline: none;
        }

    .modal-actions {
        margin-top: 20px;
        display: flex;
        justify-content: space-between;
        gap: 10px;
    }

    .enhanced-btn {
        font-weight: bold;
        font-size: 0.95rem;
        padding: 12px 16px;
        border-radius: 12px;
        border: none;
        cursor: pointer;
        flex: 1;
        transition: transform 0.2s ease, background 0.3s ease;
    }

    .confirm.enhanced-btn {
        background: #4CAF50 !important;
        color: white !important;
    }

    .cancel.enhanced-btn {
        background: #e53935;
        color: white;
    }

    .enhanced-btn:hover {
        transform: scale(1.05);
        filter: brightness(1.1);
    }

    /* Animaciones */
    @@keyframes gradientFlow {
        0%

    {
        background-position: 0% 50%;
    }

    50% {
        background-position: 100% 50%;
    }

    100% {
        background-position: 0% 50%;
    }

    }

    @@keyframes pulse {
        from

    {
        transform: scale(1);
    }

    to {
        transform: scale(1.1);
    }

    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
        transform: translateY(-10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .header-container {
        background: linear-gradient(to right, #42a5f5, #64b5f6);
        padding: 16px 20px;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(66, 165, 245, 0.25);
        margin-bottom: 25px;
    }

    .schedule-title {
        font-size: 1.5rem;
        color: #ffffff;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        margin-bottom: 10px; /* 🔽 reducido */
        text-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
    }

    .filter-container {
        color: #ffffff;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 12px;
        flex-wrap: wrap;
        margin: 0; /* 🔽 sin espacio extra */
    }

    .filter-input {
        padding: 6px 10px; /* 🔽 más compacto */
        border-radius: 8px;
        border: 2px solid #bbdefb;
        font-size: 0.95rem;
        background: #e3f2fd;
        color: #0d47a1;
        height: 36px; /* ✅ más bajito */
    }

    .reset-icon,
    .add-icon {
        font-size: 1.3rem;
        color: #ffffff;
        cursor: pointer;
        transition: transform 0.3s, color 0.3s;
        padding: 6px;
        height: 36px;
        width: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.15);
    }

        .reset-icon:hover,
        .add-icon:hover {
            background: rgba(255, 255, 255, 0.25);
            transform: scale(1.1);
        }

</style>


@code {
    private Usuario? UsuarioAutenticado;
    private List<HorarioClase> Horarios = new();
    private List<Clase> Clases = new();
    private int ClaseSeleccionadaId;
    private DateTime FechaHorario = DateTime.Today;
    private DateTime FechaFiltro = DateTime.Today;

    private string Aula = "";
    private int HorarioIdEditar;
    private bool ModoEdicion = false;
    private bool MostrarModal = false;

    private TimeSpan HoraInicio;
    private TimeSpan HoraFin;

    private DateTime HoraInicioTime
    {
        get => DateTime.Today.Add(HoraInicio);
        set => HoraInicio = value.TimeOfDay;
    }

    private DateTime HoraFinTime
    {
        get => DateTime.Today.Add(HoraFin);
        set => HoraFin = value.TimeOfDay;
    }

    protected override async Task OnInitializedAsync()
    {
        UsuarioAutenticado = await AuthService.VerificarSesion();
        if (UsuarioAutenticado != null)
        {
            await CargarDatos();
        }
        else
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task CargarDatos()
    {
        Horarios = await HorarioService.GetHorariosPorMaestroAsync(UsuarioAutenticado.Nombre, FechaFiltro);
        Clases = await HorarioService.GetClasesPorMaestroAsync(UsuarioAutenticado.Nombre);
    }

    private void AbrirModalAgregar()
    {
        ModoEdicion = false;
        ClaseSeleccionadaId = 0;
        FechaHorario = DateTime.Today;
        HoraInicio = default;
        HoraFin = default;
        Aula = string.Empty;
        MostrarModal = true;
        StateHasChanged();
    }

    private void AbrirModalEditar(HorarioClase horario)
    {
        ModoEdicion = true;
        HorarioIdEditar = horario.Id;
        ClaseSeleccionadaId = horario.ClaseId;
        FechaHorario = horario.Fecha;
        HoraInicio = horario.HoraInicio;
        HoraFin = horario.HoraFin;
        Aula = horario.Aula;
        MostrarModal = true;
        StateHasChanged();
    }

    private async Task GuardarHorario()
    {
        if (ClaseSeleccionadaId == 0 || string.IsNullOrWhiteSpace(Aula)
            || HoraInicio == default || HoraFin == default
            || FechaHorario == default)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Por favor, completa todos los campos antes de continuar.");
            return;
        }

        if (FechaHorario.Date < DateTime.Today)
        {
            await JSRuntime.InvokeVoidAsync("alert", "No puedes seleccionar una fecha anterior a hoy.");
            return;
        }

        if ((HoraFin - HoraInicio).TotalMinutes < 30)
        {
            await JSRuntime.InvokeVoidAsync("alert", "La duración del horario debe ser de al menos 30 minutos.");
            return;
        }

        if (ModoEdicion)
        {
            await HorarioService.EditarHorarioAsync(HorarioIdEditar, ClaseSeleccionadaId, FechaHorario, HoraInicio, HoraFin, Aula);
        }
        else
        {
            await HorarioService.AgregarHorarioAsync(ClaseSeleccionadaId, FechaHorario, HoraInicio, HoraFin, Aula, UsuarioAutenticado.Nombre);
        }

        await CargarDatos();
        MostrarModal = false;
        StateHasChanged();
    }

    private async Task EliminarHorario(int id)
    {
        await HorarioService.EliminarHorarioAsync(id);
        await CargarDatos();
    }

    private void RestablecerFiltro()
    {
        FechaFiltro = DateTime.Today;
        CargarDatos();
    }
    private void CerrarModal()
    {
        MostrarModal = false;
        StateHasChanged();
    }

    private readonly List<string> ColoresEnOrden = new()
{
    "#e53935", "#1e88e5", "#fdd835", "#fb8c00",
    "#43a047", "#8e24aa", "#00acc1", "#d81b60",
    "#c0ca33", "#ec407a"
};

    private Dictionary<int, string> ColoresPorClaseId = new();

    private string ObtenerClaseColorOrdenado(int claseId)
    {
        if (!ColoresPorClaseId.ContainsKey(claseId))
        {
            var index = ColoresPorClaseId.Count % ColoresEnOrden.Count;
            ColoresPorClaseId[claseId] = ColoresEnOrden[index];
        }
        return ColoresPorClaseId[claseId];
    }
}