@page "/clase-maestro/{ClaseId:int}"

@layout LayoutMaestro
@using EduSoft.Data
@using EduSoft.Services
@inject ClaseService ClaseService
@inject HorarioService HorarioService
@inject NavigationManager Navigation
@inject AuthService AuthService

<div class="class-header">
    <div class="class-banner">
        <h1>@ClaseSeleccionada?.Nombre</h1>
        <p><i class="fas fa-user"></i> Profesor: <strong>@ClaseSeleccionada?.Profesor</strong></p>
        <p><i class="fas fa-key"></i> Código: @ClaseSeleccionada?.CodigoClase</p>
        <p>
            <i class="fas fa-clock"></i>
            Horario: @(HorarioClaseSeleccionado != null
            ? $"{HorarioClaseSeleccionado.HoraInicio:hh\\:mm} - {HorarioClaseSeleccionado.HoraFin:hh\\:mm} en {HorarioClaseSeleccionado.Aula}"
            : "No asignado")
        </p>
    </div>
</div>

<div class="tareas-container">
    <h2><i class="fas fa-users"></i> Estudiantes</h2>
    <div class="students-list">
        @if (Estudiantes.Count > 0)
        {
            @foreach (var estudiante in Estudiantes)
            {
                <div class="student-chip">
                    <i class="fas fa-user"></i> @estudiante.Nombre
                </div>
            }
        }
        else
        {
            <p class="no-data">No hay estudiantes inscritos.</p>
        }
    </div>

    <h2><i class="fas fa-tasks"></i> Tareas</h2>

    @if (Tareas.Count > 0)
    {
        @foreach (var tarea in Tareas)
        {
            <div class="tarea-card" @onclick="() => IrADetalleTarea(tarea.Id)">
                <div class="tarea-header">
                    @tarea.Titulo
                    @if (tarea.EsExamen)
                    {
                        <span class="badge-examen"><i class="fas fa-file-signature"></i> Examen</span>
                    }
                </div>
                <div class="tarea-body">
                    <p class="descripcion">@tarea.Descripcion</p>
                    <span class="fecha"><i class="fas fa-calendar-day"></i> @tarea.FechaEntrega.ToString("dd MMM yyyy")</span>
                </div>
            </div>
        }
    }
    else
    {
        <p class="no-data">No hay tareas asignadas.</p>
    }

    <button class="btn-fab" @onclick="() => MostrarModal = true">
        <i class="fas fa-plus"></i>
    </button>
</div>

@if (MostrarModal)
{
    <div class="modal-overlay">
        <div class="modal-box">
            <h3>Crear Nueva Tarea</h3>
            <input type="text" placeholder="Título" @bind="NuevoTitulo" class="modal-input" />
            <textarea placeholder="Descripción" @bind="NuevoDescripcion" class="modal-input"></textarea>
            <input type="date" @bind="NuevaFechaEntrega" class="modal-input" />
            <input type="text" placeholder="Enlace externo (opcional)" @bind="NuevoLink" class="modal-input" />
            <InputFile OnChange="CargarArchivo" />

            <label class="checkbox-examen">
                <input type="checkbox" @bind="EsExamen" />
                <span>¿Es un examen?</span>
            </label>

            <div class="modal-actions">
                <button class="btn-confirm" @onclick="CrearTarea"><i class="fas fa-check"></i> Guardar</button>
                <button class="btn-cancel" @onclick="() => MostrarModal = false"><i class="fas fa-times"></i> Cancelar</button>
            </div>
        </div>
    </div>
}

<style>
    .class-header {
        background: linear-gradient(to right, #2196f3, #1e88e5);
        color: white;
        padding: 25px;
        text-align: center;
        border-radius: 12px;
        margin-bottom: 30px;
    }

    .tareas-container {
        padding: 20px;
        max-width: 900px;
        margin: auto;
    }

    .tarea-card {
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        margin-bottom: 20px;
        cursor: pointer;
        overflow: hidden;
    }

    .tarea-header {
        background: #1976d2;
        color: white;
        padding: 10px 20px;
        font-size: 1.2rem;
        font-weight: bold;
    }

    .tarea-body {
        background: #fff;
        padding: 15px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .descripcion {
        margin: 0;
        color: #263238;
        flex: 1;
    }

    .fecha {
        font-size: 0.9rem;
        color: #78909c;
        margin-left: 20px;
        white-space: nowrap;
    }

    .btn-fab {
        position: fixed;
        bottom: 30px;
        right: 30px;
        background: #43a047;
        color: white;
        border: none;
        border-radius: 50%;
        width: 56px;
        height: 56px;
        font-size: 24px;
        cursor: pointer;
        box-shadow: 0 4px 10px rgba(0,0,0,0.3);
    }

        .btn-fab:hover {
            background: #388e3c;
        }

    .students-list {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 20px;
    }

    .student-chip {
        background: #e3f2fd;
        padding: 8px 15px;
        border-radius: 20px;
        color: #1565c0;
        font-weight: 500;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 999;
    }

    .modal-box {
        background: white;
        padding: 25px;
        width: 400px;
        border-radius: 12px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        text-align: center;
    }

    .modal-input {
        width: 100%;
        margin-bottom: 12px;
        padding: 10px;
        border-radius: 8px;
        border: 1px solid #ccc;
    }

    .modal-actions {
        display: flex;
        justify-content: space-between;
        margin-top: 10px;
    }

    .btn-confirm {
        background: #43a047;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
    }

    .btn-cancel {
        background: #e53935;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
    }

    .no-data {
        text-align: center;
        color: #999;
        font-style: italic;
    }

    .badge-examen {
        background: #e53935;
        color: white;
        padding: 4px 8px;
        border-radius: 6px;
        font-size: 0.75rem;
        margin-left: 10px;
    }
</style>

@code {
    [Parameter] public int ClaseId { get; set; }
    private Clase? ClaseSeleccionada;
    private Usuario? UsuarioAutenticado;
    private HorarioClase? HorarioClaseSeleccionado;
    private List<Usuario> Estudiantes = new();
    private List<Tarea> Tareas = new();

    private string NuevoTitulo = "";
    private string NuevoDescripcion = "";
    private DateTime NuevaFechaEntrega = DateTime.Now.AddDays(7);
    private string? NuevoLink;
    private string? NombreArchivo;
    private byte[]? ContenidoArchivo;
    private bool MostrarModal = false;
    private bool EsExamen = false;


    protected override async Task OnInitializedAsync()
    {
        UsuarioAutenticado = await AuthService.VerificarSesion();

        if (UsuarioAutenticado == null)
        {
            Navigation.NavigateTo("/");
            return;
        }

        ClaseSeleccionada = await ClaseService.GetClasePorIdAsync(ClaseId);
        if (ClaseSeleccionada != null)
        {
            Estudiantes = await ClaseService.GetEstudiantesPorClaseAsync(ClaseId);
            HorarioClaseSeleccionado = await HorarioService.GetHorarioPorClaseAsync(ClaseId);
            await CargarTareas();
        }
    }

    private async Task CrearTarea()
    {
        if (UsuarioAutenticado == null || string.IsNullOrWhiteSpace(NuevoTitulo))
            return;

        bool exito = await ClaseService.CrearTarea(
            claseId: ClaseId,
            titulo: NuevoTitulo,
            descripcion: NuevoDescripcion,
            fechaEntrega: NuevaFechaEntrega,
            usuarioId: UsuarioAutenticado.Id,
            link: NuevoLink,
            archivoNombre: NombreArchivo,
            archivoContenido: ContenidoArchivo,
            esExamen: EsExamen // ✅ nuevo parámetro
        );

        if (exito)
        {
            await CargarTareas();
            MostrarModal = false;
            NuevoTitulo = "";
            NuevoDescripcion = "";
            NuevoLink = null;
            NombreArchivo = null;
            ContenidoArchivo = null;
            EsExamen = false; // ✅ reseteamos
        }
    }

    private async Task CargarTareas()
    {
        Tareas = await ClaseService.GetTareasPorClaseAsync(ClaseId);
    }

    private async Task CargarArchivo(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        NombreArchivo = archivo.Name;
        using var stream = new MemoryStream();
        await archivo.OpenReadStream().CopyToAsync(stream);
        ContenidoArchivo = stream.ToArray();
    }

    private void IrADetalleTarea(int tareaId)
    {
        Navigation.NavigateTo($"/tarea-detalle/{tareaId}");
    }

    private void VolverAlDashboard()
    {
        Navigation.NavigateTo("/dashboard-maestro");
    }
}