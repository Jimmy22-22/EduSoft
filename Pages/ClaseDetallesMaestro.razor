@page "/clase-maestro/{ClaseId:int}"

@layout LayoutMaestro
@using EduSoft.Data
@using EduSoft.Services
@inject ClaseService ClaseService
@inject HorarioService HorarioService
@inject NavigationManager Navigation
@inject AuthService AuthService

<div class="class-header">
    <div class="class-banner">
        <h1>@ClaseSeleccionada?.Nombre</h1>
        <p><i class="fas fa-user"></i> Profesor: <strong>@ClaseSeleccionada?.Profesor</strong></p>
        <p><i class="fas fa-key"></i> Código: @ClaseSeleccionada?.CodigoClase</p>
        <p>
            <i class="fas fa-clock"></i>
            Horario: @(HorarioClaseSeleccionado != null
                        ? $"{HorarioClaseSeleccionado.HoraInicio:hh\\:mm} - {HorarioClaseSeleccionado.HoraFin:hh\\:mm} en {HorarioClaseSeleccionado.Aula}"
                        : "No asignado")
        </p>
    </div>
</div>

<div class="tareas-container">
    <h2><i class="fas fa-users"></i> Estudiantes</h2>
    <div class="students-list">
        @if (Estudiantes.Count > 0)
        {
            @foreach (var estudiante in Estudiantes)
            {
                <div class="student-chip">
                    <i class="fas fa-user"></i> @estudiante.Nombre
                </div>
            }
        }
        else
        {
            <p class="no-data">No hay estudiantes inscritos.</p>
        }
    </div>

    <div class="tareas-header">
        <h2><i class="fas fa-tasks"></i> Tareas</h2>
        <button class="btn-add-tarea" @onclick="() => MostrarModal = true">
            <i class="fas fa-plus"></i> Nueva
        </button>
    </div>

    @if (Tareas.Count > 0)
    {
        @foreach (var tarea in Tareas)
        {
            <div class="tarea-card" @onclick="() => IrADetalleTarea(tarea.Id)">
                <div class="tarea-header">
                    @tarea.Titulo
                    @if (tarea.EsExamen)
                    {
                        <span class="badge-examen"><i class="fas fa-file-signature"></i> Examen</span>
                    }
                </div>
                <div class="tarea-body">
                    <p class="descripcion">@tarea.Descripcion</p>
                    <span class="fecha"><i class="fas fa-calendar-day"></i> @tarea.FechaEntrega.ToString("dd MMM yyyy")</span>
                </div>
            </div>
        }
    }
    else
    {
        <p class="no-data">No hay tareas asignadas.</p>
    }
</div>

@if (MostrarModal)
{
    <div class="modal-overlay">
        <div class="modal-box enhanced">
            <div class="modal-header">
                <i class="fas fa-pen-to-square modal-icon"></i>
                <h3>Crear Nueva Tarea</h3>
                <p class="modal-subtitle">Completa los campos para agregar una nueva tarea o examen.</p>
            </div>

            <input type="text" placeholder="Título" @bind="NuevoTitulo" class="modal-input enhanced-input" />
            <textarea placeholder="Descripción" @bind="NuevoDescripcion" class="modal-input enhanced-input"></textarea>
            <input type="date"
                   @bind="NuevaFechaEntrega"
                   min="@DateTime.Today.ToString("yyyy-MM-dd")"
                   class="modal-input enhanced-input" />
            <input type="text" placeholder="Enlace externo (opcional)" @bind="NuevoLink" class="modal-input enhanced-input" />
            <div class="upload-wrapper">
                <label for="archivo-input" class="upload-label">
                    <i class="fas fa-upload"></i> Seleccionar archivo
                </label>
                <InputFile id="archivo-input" class="input-hidden" OnChange="CargarArchivo" />
                @if (!string.IsNullOrEmpty(NombreArchivo))
                {
                    <p class="archivo-nombre"><i class="fas fa-file"></i> @NombreArchivo</p>
                }
            </div>

            <div class="toggle-container">
                <label class="switch">
                    <input type="checkbox" @bind="EsExamen" />
                    <span class="slider"></span>
                </label>
                <span class="toggle-label"><i class="fas fa-file-signature"></i> ¿Es un examen?</span>
            </div>

            <div class="modal-actions">
                <button class="btn-confirm enhanced-btn" @onclick="CrearTarea"><i class="fas fa-check-circle"></i> Guardar</button>
                <button class="btn-cancel enhanced-btn" @onclick="() => MostrarModal = false"><i class="fas fa-times-circle"></i> Cancelar</button>
            </div>
        </div>
    </div>
}

<style>
    .class-header {
        background: linear-gradient(to right, #2196f3, #1e88e5);
        color: white;
        padding: 25px;
        text-align: center;
        border-radius: 12px;
        margin-bottom: 30px;
    }

    .tareas-container {
        padding: 20px;
        max-width: 900px;
        margin: auto;
    }

    .tareas-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .btn-add-tarea {
        background: #43a047;
        color: white;
        border: none;
        padding: 8px 24px; 
        font-size: 1rem;
        border-radius: 9999px; 
        cursor: pointer;
        display: inline-flex; 
        align-items: center;
        gap: 8px; 
        transition: background-color 0.3s ease;
    }

        .btn-add-tarea:hover {
            background: #388e3c;
        }

    .tarea-card {
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        margin-bottom: 20px;
        cursor: pointer;
        overflow: hidden;
    }

    .tarea-header {
        background: #1976d2;
        color: white;
        padding: 10px 20px;
        font-size: 1.2rem;
        font-weight: bold;
    }

    .tarea-body {
        background: #fff;
        padding: 15px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .descripcion {
        margin: 0;
        color: #263238;
        flex: 1;
    }

    .fecha {
        font-size: 0.9rem;
        color: #78909c;
        margin-left: 20px;
        white-space: nowrap;
    }

    .students-list {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 20px;
    }

    .student-chip {
        background: #e3f2fd;
        padding: 8px 15px;
        border-radius: 20px;
        color: #1565c0;
        font-weight: 500;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 999;
    }

    .modal-box {
        background: white;
        padding: 25px;
        width: 400px;
        border-radius: 12px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        text-align: center;
    }

    .modal-input {
        width: 100%;
        margin-bottom: 12px;
        padding: 10px;
        border-radius: 8px;
        border: 1px solid #ccc;
    }

    .modal-actions {
        display: flex;
        justify-content: space-between;
        margin-top: 10px;
    }

    .btn-confirm {
        background: #43a047;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
    }

    .btn-cancel {
        background: #e53935;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
    }

    .no-data {
        text-align: center;
        color: #999;
        font-style: italic;
    }

    .badge-examen {
        background: #e53935;
        color: white;
        padding: 4px 8px;
        border-radius: 6px;
        font-size: 0.75rem;
        margin-left: 10px;
    }

    .checkbox-examen {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-top: 10px;
    }

    .modal-box.enhanced {
    width: 450px;
    padding: 35px 25px;
    text-align: center;
    border-radius: 20px;
    color: white;
    position: relative;
    animation: scaleIn 0.5s ease-out;
    background: linear-gradient(270deg, #fff176, #81c784, #ffeb3b);
    background-size: 600% 600%;
    animation: gradientFlow 8s ease infinite;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.25), inset 0 0 12px rgba(255, 255, 255, 0.1), 0 0 0 3px rgba(255, 255, 255, 0.08);
}

@@keyframes gradientFlow {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

@@keyframes scaleIn {
    from { transform: scale(0.8); opacity: 0; }
    to { transform: scale(1); opacity: 1; }
}

.modal-header {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 20px;
}

.modal-icon {
    font-size: 2.5rem;
    color: #ffffff !important;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    animation: pulse 1s infinite alternate;
    margin-bottom: 10px;
}

.modal-subtitle {
    font-size: 0.95rem;
    color: #fdfdfd;
    opacity: 0.9;
    margin-top: -5px;
    margin-bottom: 15px;
}

@@keyframes pulse {
    from { transform: scale(1); }
    to { transform: scale(1.1); }
}

.enhanced-input {
    font-size: 1rem;
    padding: 10px;
    margin-bottom: 12px;
    width: 100%;
    border-radius: 10px;
    border: 2px solid #c5e1a5;
    transition: border 0.3s, box-shadow 0.3s;
}

.enhanced-input:focus {
    border-color: #aed581;
    box-shadow: 0 0 6px rgba(255, 255, 255, 0.4);
    outline: none;
    background: #f9fbe7;
    color: #33691e;
}

.enhanced-btn {
    font-weight: bold;
    font-size: 1rem;
    padding: 12px 18px;
    border-radius: 12px;
    border: none;
    cursor: pointer;
    width: 48%;
    transition: transform 0.2s ease, background 0.3s ease;
}

.btn-confirm.enhanced-btn {
    background: #66bb6a;
    color: white;
}

.btn-cancel.enhanced-btn {
    background: #ef5350;
    color: white;
}

.enhanced-btn:hover {
    transform: scale(1.05);
    filter: brightness(1.1);
}

    .upload-wrapper {
        margin-top: 10px;
        margin-bottom: 10px;
        text-align: center;
    }

    .upload-label {
        display: inline-block;
        background: #ffee58;
        color: #33691e;
        padding: 10px 18px;
        border-radius: 25px;
        font-weight: bold;
        font-size: 0.95rem;
        cursor: pointer;
        box-shadow: 0 3px 6px rgba(0,0,0,0.1);
        transition: background 0.3s ease, transform 0.2s ease;
    }

        .upload-label:hover {
            background: #d4e157;
            transform: scale(1.05);
        }

    .input-hidden {
        display: none;
    }

    .archivo-nombre {
        margin-top: 8px;
        font-size: 0.85rem;
        color: #ffffff;
        background: rgba(0,0,0,0.2);
        padding: 6px 10px;
        border-radius: 8px;
        display: inline-block;
    }

    .toggle-container {
        display: flex;
        align-items: center;
        gap: 12px;
        margin: 15px 0;
        justify-content: center;
    }

    .toggle-label {
        font-size: 1rem;
        color: #fffde7;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .switch {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 26px;
    }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        background-color: #ccc;
        border-radius: 26px;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 20px;
            width: 20px;
            left: 4px;
            bottom: 3px;
            background-color: white;
            border-radius: 50%;
            transition: .4s;
        }

    .switch input:checked + .slider {
        background-color: #8bc34a;
    }

        .switch input:checked + .slider:before {
            transform: translateX(24px);
        }
</style>

@code {
    [Parameter] public int ClaseId { get; set; }
    private Clase? ClaseSeleccionada;
    private Usuario? UsuarioAutenticado;
    private HorarioClase? HorarioClaseSeleccionado;
    private List<Usuario> Estudiantes = new();
    private List<Tarea> Tareas = new();

    private string NuevoTitulo = "";
    private string NuevoDescripcion = "";
    private DateTime NuevaFechaEntrega = DateTime.Now.AddDays(7);
    private string? NuevoLink;
    private string? NombreArchivo;
    private byte[]? ContenidoArchivo;
    private bool MostrarModal = false;
    private bool EsExamen = false;

    protected override async Task OnInitializedAsync()
    {
        UsuarioAutenticado = await AuthService.VerificarSesion();

        if (UsuarioAutenticado == null)
        {
            Navigation.NavigateTo("/");
            return;
        }

        ClaseSeleccionada = await ClaseService.GetClasePorIdAsync(ClaseId);
        if (ClaseSeleccionada != null)
        {
            Estudiantes = await ClaseService.GetEstudiantesPorClaseAsync(ClaseId);
            HorarioClaseSeleccionado = await HorarioService.GetHorarioPorClaseAsync(ClaseId);
            await CargarTareas();
        }
    }

    private async Task CrearTarea()
    {
        if (UsuarioAutenticado == null || string.IsNullOrWhiteSpace(NuevoTitulo))
            return;

        string? linkFormateado = string.IsNullOrWhiteSpace(NuevoLink)
    ? null
    : (NuevoLink.StartsWith("http://") || NuevoLink.StartsWith("https://")
        ? NuevoLink
        : $"https://{NuevoLink}");

        bool exito = await ClaseService.CrearTarea(
            claseId: ClaseId,
            titulo: NuevoTitulo,
            descripcion: NuevoDescripcion,
            fechaEntrega: NuevaFechaEntrega,
            usuarioId: UsuarioAutenticado.Id,
            link: linkFormateado,
            archivoNombre: NombreArchivo,
            archivoContenido: ContenidoArchivo,
            esExamen: EsExamen
        );

        if (exito)
        {
            await CargarTareas();
            MostrarModal = false;
            NuevoTitulo = "";
            NuevoDescripcion = "";
            NuevoLink = null;
            NombreArchivo = null;
            ContenidoArchivo = null;
            EsExamen = false;
        }
    }

    private async Task CargarTareas()
    {
        Tareas = await ClaseService.GetTareasPorClaseAsync(ClaseId);
    }

    private async Task CargarArchivo(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        NombreArchivo = archivo.Name;
        using var stream = new MemoryStream();
        await archivo.OpenReadStream().CopyToAsync(stream);
        ContenidoArchivo = stream.ToArray();
    }

    private void IrADetalleTarea(int tareaId)
    {
        Navigation.NavigateTo($"/tarea-detalle/{tareaId}");
    }

    private void VolverAlDashboard()
    {
        Navigation.NavigateTo("/dashboard-maestro");
    }
}
