@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace EduSoft.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" />

    <link href="css/site.css" rel="stylesheet" />
    <link href="EduSoft.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png" />

    <component type="typeof(HeadOutlet)" render-mode="Server" />
</head>
<body>
    <component type="typeof(App)" render-mode="Server" />
    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="js/teclado.js"></script>

    <script>
        window.downloadFileFromStream = async (fileName, contentType, contentStreamReference) => {
            const arrayBuffer = await contentStreamReference.arrayBuffer();
            const blob = new Blob([arrayBuffer], { type: contentType });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = fileName;
            a.click();
            URL.revokeObjectURL(url);
        };

        window.previewFileFromStream = async (contentType, contentStreamReference) => {
            const arrayBuffer = await contentStreamReference.arrayBuffer();
            const blob = new Blob([arrayBuffer], { type: contentType });
            const url = URL.createObjectURL(blob);
            window.open(url, '_blank');
        };
    </script>

    <script>
        window.voiceRecognition = {
            recognizer: null,
            isRecording: false,

            startRecognition: function (dotNetHelper) {
                const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
                if (!SpeechRecognition) {
                    alert("Tu navegador no soporta reconocimiento de voz.");
                    return;
                }

                const recognition = new SpeechRecognition();
                recognition.lang = "es-ES";
                recognition.continuous = false;
                recognition.interimResults = false;

                this.recognizer = recognition;
                this.isRecording = true;

                recognition.onstart = () => {
                    console.log("🎙️ Reconocimiento iniciado");
                    dotNetHelper.invokeMethodAsync("MostrarGrabando");
                };

                recognition.onresult = async function (event) {
                    const texto = event.results[0][0].transcript;
                    console.log("🎤 Texto reconocido:", texto);

                    // ✅ Envía a Blazor
                    await dotNetHelper.invokeMethodAsync("TextoDesdeVoz", texto);

                    // ✅ Detiene después de enviar
                    voiceRecognition.recognizer.stop();
                };

                recognition.onerror = function (event) {
                    console.error("❌ Error en reconocimiento:", event.error);
                    dotNetHelper.invokeMethodAsync("OcultarGrabando");
                };

                recognition.onend = function () {
                    console.log("🎤 Grabación finalizada");
                    voiceRecognition.isRecording = false;
                    dotNetHelper.invokeMethodAsync("OcultarGrabando");
                };

                recognition.start();
            },

            stopRecognition: function () {
                if (this.recognizer && this.isRecording) {
                    this.recognizer.stop();
                    this.isRecording = false;
                }
            }
        };
    </script>

    <script>
        window.scrollChatToBottom = () => {
            const box = document.querySelector('.chat-box');
            if (box) {
                box.scrollTop = box.scrollHeight;
            }
        };
    </script>

    <script>
        window.scrollChatToBottom = () => {
            setTimeout(() => {
                const anchor = document.getElementById("scroll-anchor");
                if (anchor) {
                    anchor.scrollIntoView({ behavior: "smooth", block: "end" });
                }
            }, 100); // 👈 Espera un poco para asegurar render completo
        };
    </script>

    <script>
        window.hablarTexto = (texto) => {
            if (!('speechSynthesis' in window)) return;

            const utterance = new SpeechSynthesisUtterance(texto);
            utterance.lang = "es-ES";
            utterance.rate = 0.95;
            utterance.pitch = 1.2;
            utterance.volume = 1;

            const asignarVozYHablar = () => {
                const voces = speechSynthesis.getVoices();
                const vozFemenina = voces.find(v =>
                    v.name.toLowerCase().includes("female")
                );

                if (vozFemenina) {
                    utterance.voice = vozFemenina;
                }

                speechSynthesis.speak(utterance);
            };

            if (speechSynthesis.getVoices().length === 0) {
                const handler = () => {
                    asignarVozYHablar();
                    speechSynthesis.onvoiceschanged = null; // ❌ no repetir
                };
                speechSynthesis.onvoiceschanged = handler;
            } else {
                asignarVozYHablar();
            }
        };
    </script>




    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="_framework/blazor.server.js"></script>
</body>
</html>
