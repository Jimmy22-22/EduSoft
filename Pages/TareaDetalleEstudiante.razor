@page "/tarea-detalle-estudiante/{TareaId:int}"
@layout LayoutEstudiante
@using EduSoft.Data
@using EduSoft.Services
@inject ClaseService ClaseService
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject TareaEstudianteService TareaEstudianteService
@inject IJSRuntime JS

<div class="page-container">
    <div class="sidebar">
        <div class="card sidebar-card gradient-azul">
            <h3 class="card-title"><i class="fa-solid fa-book-open me-2"></i> @Tarea?.Titulo</h3>
            <div class="card-content">
                <div class="info-item">
                    <label><i class="fa-solid fa-file-lines me-2"></i> Descripción:</label>
                    <span>@Tarea?.Descripcion</span>
                </div>
                <div class="info-item">
                    <label><i class="fa-regular fa-calendar-days me-2"></i> Fecha de Entrega:</label>
                    <span>@Tarea?.FechaEntrega.ToString("dd MMM yyyy")</span>
                </div>
                @if (!string.IsNullOrWhiteSpace(Tarea?.Link))
                {
                    <div class="info-item">
                        <label><i class="fa-solid fa-link me-2"></i> Enlace:</label>
                        <a href="@Tarea.Link" target="_blank">@Tarea.Link</a>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Tarea?.ArchivoNombre))
                {
                    <div class="info-item">
                        <label><i class="fa-solid fa-paperclip me-2"></i> Archivo del Profesor:</label>
                        <button class="btn btn-download truncate-text" @onclick="() => VerArchivoStream(Tarea.ArchivoNombre, Tarea.ArchivoContenido)">
                            <i class="fa-solid fa-download me-1"></i> Descargar @Tarea.ArchivoNombre
                        </button>
                    </div>
                }
            </div>
            <button class="btn btn-back" @onclick="VolverAClase">
                <i class="fa-solid fa-arrow-left me-1"></i> Volver a la clase
            </button>
        </div>
    </div>

    <div class="main-content">
        @if (Entrega != null)
        {
            <div class="card gradient-celeste">
                <h4 class="card-title text-green"><i class="fa-solid fa-check-circle me-2"></i> Tarea Entregada</h4>
                <div class="card-content">
                    <div class="info-item">
                        <label><i class="fa-regular fa-clock me-2"></i> Fecha:</label>
                        <span>@Entrega.FechaEntrega.ToString("dd MMM yyyy HH:mm")</span>
                    </div>
                    @if (!string.IsNullOrEmpty(Entrega.Comentario))
                    {
                        <div class="info-item">
                            <label><i class="fa-regular fa-comment me-2"></i> Comentario:</label>
                            <span>@Entrega.Comentario</span>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Entrega.Link))
                    {
                        <div class="info-item">
                            <label><i class="fa-solid fa-link me-2"></i> Enlace enviado:</label>
                            <a href="@Entrega.Link" target="_blank">@Entrega.Link</a>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Entrega.ArchivoNombre))
                    {
                        <div class="info-item">
                            <label><i class="fa-solid fa-file-lines me-2"></i> Archivo enviado:</label>
                            <button class="btn btn-download truncate-text" @onclick="() => VerArchivoStream(Entrega.ArchivoNombre, Entrega.ArchivoContenido)">
                                <i class="fa-solid fa-file-arrow-down me-1"></i> Ver @Entrega.ArchivoNombre
                            </button>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="card gradient-blanco">
                <h4 class="card-title"><i class="fa-solid fa-upload me-2"></i> Entregar Tarea</h4>
                <div class="card-content">
                    <textarea class="input input-textarea" placeholder="✏️ Comentario privado (opcional)" @bind="Comentario"></textarea>
                    <input class="input input-link" placeholder="🔗 Enlace externo (opcional)" @bind="LinkEstudiante" />

                    <label class="upload-label">
                        <i class="fa-solid fa-upload me-1"></i> Subir archivo
                        <InputFile OnChange="CargarArchivoEstudiante" class="input-file-hidden" />
                    </label>

                    @if (NombreArchivo != null)
                    {
                        <p class="archivo-subido"><i class="fa-solid fa-file me-1"></i> @NombreArchivo</p>
                    }

                    <button class="btn btn-submit" @onclick="ActivarModal">
                        <i class="fa-solid fa-paper-plane me-1"></i> Enviar
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@if (MostrarModal)
{
    <div class="modal-overlay">
        <div class="modal-box">
            <h3><i class="fa-solid fa-question-circle me-2"></i> ¿Confirmar entrega?</h3>
            <p>Estás a punto de entregar esta tarea. ¿Deseas continuar?</p>
            <div class="modal-actions">
                <button class="btn btn-confirm" @onclick="EntregarTarea"><i class="fa-solid fa-check me-1"></i> Sí, Entregar</button>
                <button class="btn btn-cancel" @onclick="() => MostrarModal = false"><i class="fa-solid fa-times me-1"></i> Cancelar</button>
            </div>
        </div>
    </div>
}


<style>
    .page-container {
        display: flex;
        gap: 30px;
        padding: 40px;
        flex-wrap: wrap;
    }

    .sidebar {
        flex: 4;
        min-width: 480px;
        max-width: 700px;
    }

    .main-content {
        flex: 0.8;
        min-width: 260px;
    }



    .card {
        background: #f8fafd;
        padding: 22px;
        border-radius: 16px;
        box-shadow: 0 4px 18px rgba(0, 0, 0, 0.08);
        margin-bottom: 24px;
        transition: transform 0.2s ease;
    }

        .card:hover {
            transform: scale(1.01);
        }

    .card-title {
        font-size: 1.6rem;
        margin-bottom: 15px;
        color: #0052D4;
        font-weight: bold;
    }

    .info-item {
        background: #ffffff;
        padding: 12px 16px;
        border-radius: 10px;
        margin-bottom: 12px;
        border-left: 4px solid #64b5f6;
    }

        .info-item label {
            font-weight: 600;
            display: block;
            color: #0d47a1;
            margin-bottom: 5px;
        }

        .info-item span,
        .info-item a {
            color: #212121;
            word-wrap: break-word;
        }

    .truncate-text {
        display: inline-block;
        max-width: 260px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        vertical-align: middle;
    }


    .upload-label {
        background: #329fff;
        color: white;
        padding: 10px 20px;
        border-radius: 10px;
        cursor: pointer;
        margin-top: 12px;
        font-weight: 500;
    }

        .upload-label:hover {
            background: #007adf;
        }

    .btn {
        padding: 10px 20px;
        border-radius: 10px;
        border: none;
        cursor: pointer;
        font-weight: 500;
        transition: background 0.2s ease-in-out;
    }

    .btn-submit {
        background: #1e88e5;
        color: white;
        margin-top: 15px;
    }

        .btn-submit:hover {
            background: #1565c0;
        }

    .btn-download {
        background: #42a5f5;
        color: white;
    }

        .btn-download:hover {
            background: #1e88e5;
        }

    .btn-back {
        background: #546e7a;
        color: white;
        width: 100%;
        margin-top: 20px;
    }

        .btn-back:hover {
            background: #37474f;
        }

    .archivo-subido {
        margin-top: 10px;
        color: #333;
        font-style: italic;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 999;
    }

    .modal-box {
        background: #ffffff;
        padding: 25px;
        border-radius: 14px;
        box-shadow: 0 6px 20px rgba(0,0,0,0.25);
        text-align: center;
        max-width: 420px;
    }

    .modal-actions {
        margin-top: 20px;
        display: flex;
        justify-content: space-around;
    }

    .btn-confirm {
        background: #2e7d32;
        color: white;
    }

        .btn-confirm:hover {
            background: #1b5e20;
        }

    .btn-cancel {
        background: #e53935;
        color: white;
    }

        .btn-cancel:hover {
            background: #b71c1c;
        }

    .text-green {
        color: #2e7d32;
    }

    /* Gradientes coherentes con el layout */
    .gradient-azul {
        background: linear-gradient(to bottom right, #bbdefb, #64b5f6);
    }

    .gradient-celeste {
        background: linear-gradient(to bottom right, #e1f5fe, #81d4fa);
    }

    .gradient-blanco {
        background: linear-gradient(to bottom right, #ffffff, #f4faff);
    }

</style>

@code {
    [Parameter] public int TareaId { get; set; }
    private Tarea? Tarea;
    private EntregaTareaEstudiante? Entrega;

    private string Comentario = "";
    private string? LinkEstudiante;
    private string? NombreArchivo;
    private byte[]? ContenidoArchivo;
    private Usuario? UsuarioAutenticado;
    private bool MostrarModal = false;

    protected override async Task OnInitializedAsync()
    {
        UsuarioAutenticado = await AuthService.VerificarSesion();
        Tarea = await ClaseService.GetTareaPorIdAsync(TareaId);

        if (UsuarioAutenticado != null && Tarea != null)
        {
            Entrega = await TareaEstudianteService.ObtenerEntregaEstudianteAsync(Tarea.Id, UsuarioAutenticado.Id);
        }
    }

    private async Task VerArchivoStream(string nombre, byte[] contenido)
    {
        var extension = Path.GetExtension(nombre).ToLowerInvariant();
        var mime = extension switch
        {
            ".pdf" => "application/pdf",
            ".jpg" or ".jpeg" => "image/jpeg",
            ".png" => "image/png",
            ".gif" => "image/gif",
            ".bmp" => "image/bmp",
            ".webp" => "image/webp",
            ".doc" => "application/msword",
            ".docx" => "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            ".xls" => "application/vnd.ms-excel",
            ".xlsx" => "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            ".ppt" => "application/vnd.ms-powerpoint",
            ".pptx" => "application/vnd.openxmlformats-officedocument.presentationml.presentation",
            ".txt" => "text/plain",
            ".csv" => "text/csv",
            _ => "application/octet-stream"
        };

        using var streamRef = new DotNetStreamReference(new MemoryStream(contenido));

        if (mime.StartsWith("application/pdf") || mime.StartsWith("image/"))
        {
            await JS.InvokeVoidAsync("previewFileFromStream", mime, streamRef);
        }
        else
        {
            await JS.InvokeVoidAsync("downloadFileFromStream", nombre, mime, streamRef);
        }
    }

    private async Task CargarArchivoEstudiante(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        NombreArchivo = archivo.Name;
        using var stream = new MemoryStream();
        await archivo.OpenReadStream().CopyToAsync(stream);
        ContenidoArchivo = stream.ToArray();
    }

    private async Task EntregarTarea()
    {
        if (UsuarioAutenticado == null || Tarea == null)
            return;

        // Forzar que el enlace comience con https:// si no lo tiene
        string? enlaceFinal = null;
        if (!string.IsNullOrWhiteSpace(LinkEstudiante))
        {
            enlaceFinal = LinkEstudiante.Trim();
            if (!enlaceFinal.StartsWith("http://") && !enlaceFinal.StartsWith("https://"))
            {
                enlaceFinal = "https://" + enlaceFinal;
            }
        }

        var entrega = new EntregaTareaEstudiante
            {
                TareaId = Tarea.Id,
                UsuarioId = UsuarioAutenticado.Id,
                Comentario = Comentario,
                Link = enlaceFinal,
                ArchivoNombre = NombreArchivo,
                ArchivoContenido = ContenidoArchivo,
                FechaEntrega = DateTime.Now
            };

        await TareaEstudianteService.EnviarEntregaAsync(entrega);
        Entrega = entrega;
        MostrarModal = false;

        Comentario = "";
        LinkEstudiante = null;
        NombreArchivo = null;
        ContenidoArchivo = null;
    }

    private void ActivarModal()
    {
        MostrarModal = true;
    }

    private void VolverAClase()
    {
        if (Tarea != null)
        {
            Navigation.NavigateTo($"/clase-estudiante/{Tarea.ClaseId}");
        }
    }
}
