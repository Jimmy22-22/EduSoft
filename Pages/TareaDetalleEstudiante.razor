@page "/tarea-detalle-estudiante/{TareaId:int}"

@layout LayoutEstudiante
@using EduSoft.Data
@using EduSoft.Services
@inject ClaseService ClaseService
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject TareaEstudianteService TareaEstudianteService
@inject IJSRuntime JS

<h2 class="tarea-titulo">@Tarea?.Titulo</h2>

@if (Tarea != null)
{
    <div class="tarea-detalle-box">
        <p><strong>Descripción:</strong> @Tarea.Descripcion</p>
        <p><strong>Fecha de Entrega:</strong> @Tarea.FechaEntrega.ToString("dd MMM yyyy")</p>

        @if (!string.IsNullOrWhiteSpace(Tarea.Link))
        {
            <p><strong>Enlace:</strong> <a href="@Tarea.Link" target="_blank">@Tarea.Link</a></p>
        }

        @if (!string.IsNullOrEmpty(Tarea.ArchivoNombre))
        {
            <p>
                <strong>Archivo del Profesor:</strong>
                <button class="descargar-btn" @onclick="() => VerArchivoStream(Tarea.ArchivoNombre, Tarea.ArchivoContenido)">
                    <i class="fas fa-download"></i> Ver/Descargar @Tarea.ArchivoNombre
                </button>
            </p>
        }

        <hr />

        @if (Entrega != null)
        {
            <div class="entrega-previa">
                <h4><i class="fas fa-check-circle text-green"></i> Ya has entregado esta tarea</h4>
                <p><strong>Fecha:</strong> @Entrega.FechaEntrega.ToString("dd MMM yyyy HH:mm")</p>
                @if (!string.IsNullOrEmpty(Entrega.Comentario))
                {
                    <p><strong>Comentario:</strong> @Entrega.Comentario</p>
                }
                @if (!string.IsNullOrEmpty(Entrega.Link))
                {
                    <p><strong>Enlace enviado:</strong> <a href="@Entrega.Link" target="_blank">@Entrega.Link</a></p>
                }
                @if (!string.IsNullOrEmpty(Entrega.ArchivoNombre))
                {
                    <p>
                        <strong>Archivo enviado:</strong>
                        <button class="descargar-btn" @onclick="() => VerArchivoStream(Entrega.ArchivoNombre, Entrega.ArchivoContenido)">
                            <i class="fas fa-file-download"></i> Ver/Descargar @Entrega.ArchivoNombre
                        </button>
                    </p>
                }
            </div>
        }
        else
        {
            <h4>Entregar Tarea</h4>
            <textarea class="input-textarea" placeholder="Comentario privado (opcional)" @bind="Comentario"></textarea>
            <input class="input-link" placeholder="Enlace externo (opcional)" @bind="LinkEstudiante" />
            <InputFile OnChange="CargarArchivoEstudiante" />
            <button class="btn-entregar" @onclick="ActivarModal"><i class="fas fa-paper-plane"></i> Enviar</button>
        }

        <button class="btn-volver" @onclick="VolverAClase">
            <i class="fas fa-arrow-left"></i> Volver a la clase
        </button>
    </div>
}

@if (MostrarModal)
{
    <div class="modal-overlay">
        <div class="modal-box">
            <h3>¿Confirmar entrega?</h3>
            <p>Estás a punto de entregar esta tarea. ¿Deseas continuar?</p>
            <div class="modal-actions">
                <button class="btn-confirm" @onclick="EntregarTarea">Sí, Entregar</button>
                <button class="btn-cancel" @onclick="() => MostrarModal = false">Cancelar</button>
            </div>
        </div>
    </div>
}

<style>
    .tarea-titulo {
        color: #1e88e5;
        text-align: center;
        margin-top: 20px;
        font-size: 2rem;
    }

    .tarea-detalle-box {
        background: #f9f9f9;
        padding: 25px;
        max-width: 700px;
        margin: auto;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .entrega-previa {
        background: #e8f5e9;
        border-left: 4px solid #43a047;
        padding: 15px;
        margin-top: 20px;
        border-radius: 8px;
    }

    .descargar-btn, .btn-entregar, .btn-confirm {
        background: #43a047;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        cursor: pointer;
        margin-top: 10px;
    }

    .btn-volver, .btn-cancel {
        margin-top: 20px;
        background: #607d8b;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
    }

    .input-textarea, .input-link {
        width: 100%;
        padding: 10px;
        border-radius: 8px;
        border: 1px solid #ccc;
        margin-top: 10px;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 999;
    }

    .modal-box {
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        text-align: center;
        max-width: 400px;
    }

    .modal-actions {
        margin-top: 20px;
        display: flex;
        justify-content: space-between;
    }

    .no-data {
        text-align: center;
        margin-top: 40px;
        color: #888;
        font-size: 1.2rem;
    }

    .text-green {
        color: #2e7d32;
    }
</style>

@code {
    [Parameter] public int TareaId { get; set; }
    private Tarea? Tarea;
    private EntregaTareaEstudiante? Entrega;

    private string Comentario = "";
    private string? LinkEstudiante;
    private string? NombreArchivo;
    private byte[]? ContenidoArchivo;
    private Usuario? UsuarioAutenticado;
    private bool MostrarModal = false;

    protected override async Task OnInitializedAsync()
    {
        UsuarioAutenticado = await AuthService.VerificarSesion();
        Tarea = await ClaseService.GetTareaPorIdAsync(TareaId);

        if (UsuarioAutenticado != null && Tarea != null)
        {
            Entrega = await TareaEstudianteService.ObtenerEntregaEstudianteAsync(Tarea.Id, UsuarioAutenticado.Id);
        }
    }

    private async Task VerArchivoStream(string nombre, byte[] contenido)
    {
        var extension = Path.GetExtension(nombre).ToLowerInvariant();
        var mime = extension switch
        {
            ".pdf" => "application/pdf",
            ".jpg" or ".jpeg" => "image/jpeg",
            ".png" => "image/png",
            ".gif" => "image/gif",
            ".bmp" => "image/bmp",
            ".webp" => "image/webp",
            ".doc" => "application/msword",
            ".docx" => "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            ".xls" => "application/vnd.ms-excel",
            ".xlsx" => "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            ".ppt" => "application/vnd.ms-powerpoint",
            ".pptx" => "application/vnd.openxmlformats-officedocument.presentationml.presentation",
            ".txt" => "text/plain",
            ".csv" => "text/csv",
            _ => "application/octet-stream"
        };

        using var streamRef = new DotNetStreamReference(new MemoryStream(contenido));

        if (mime.StartsWith("application/pdf") || mime.StartsWith("image/"))
        {
            await JS.InvokeVoidAsync("previewFileFromStream", mime, streamRef);
        }
        else
        {
            await JS.InvokeVoidAsync("downloadFileFromStream", nombre, mime, streamRef);
        }
    }

    private async Task CargarArchivoEstudiante(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        NombreArchivo = archivo.Name;
        using var stream = new MemoryStream();
        await archivo.OpenReadStream().CopyToAsync(stream);
        ContenidoArchivo = stream.ToArray();
    }

    private async Task EntregarTarea()
    {
        if (UsuarioAutenticado == null || Tarea == null)
            return;

        var entrega = new EntregaTareaEstudiante
            {
                TareaId = Tarea.Id,
                UsuarioId = UsuarioAutenticado.Id,
                Comentario = Comentario,
                Link = LinkEstudiante,
                ArchivoNombre = NombreArchivo,
                ArchivoContenido = ContenidoArchivo,
                FechaEntrega = DateTime.Now
            };

        await TareaEstudianteService.EnviarEntregaAsync(entrega);
        Entrega = entrega;
        MostrarModal = false;

        Comentario = "";
        LinkEstudiante = null;
        NombreArchivo = null;
        ContenidoArchivo = null;
    }

    private void ActivarModal()
    {
        MostrarModal = true;
    }

    private void VolverAClase()
    {
        if (Tarea != null)
        {
            Navigation.NavigateTo($"/clase-estudiante/{Tarea.ClaseId}");
        }
    }
}
