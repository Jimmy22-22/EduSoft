@page "/examenes-maestro"
@layout LayoutMaestro
@using EduSoft.Data
@using EduSoft.Services
@inject ClaseService ClaseService
@inject TareaEstudianteService TareaEstudianteService
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h2 class="titulo"><i class="fas fa-clipboard-list"></i> Exámenes por Clase</h2>

@if (UsuarioAutenticado == null)
{
    <p class="no-data">Inicia sesión para ver los exámenes.</p>
}
else
{
    <div class="form-seleccion">
        <label><i class="fas fa-book"></i> Selecciona una clase:</label>
        <select class="form-control" value="@ClaseIdSeleccionada" @onchange="OnClaseChanged">
            <option value="">-- Seleccionar --</option>
            @foreach (var clase in Clases)
            {
                <option value="@clase.Id">@clase.Nombre</option>
            }
        </select>
    </div>

    @if (Examenes.Count > 0)
    {
        @foreach (var examen in Examenes)
        {
            <div class="examen-card">
                <h4>@examen.Titulo <span class="badge-examen">Examen</span></h4>
                <p>@examen.Descripcion</p>
                <p><i class="fas fa-calendar-alt"></i> Fecha entrega: @examen.FechaEntrega.ToString("dd MMM yyyy")</p>

                <details>
                    <summary><i class="fas fa-users"></i> Ver Entregas</summary>
                    <table class="tabla-entregas">
                        <thead>
                            <tr>
                                <th>Estudiante</th>
                                <th>Comentario</th>
                                <th>Link</th>
                                <th>Archivo</th>
                                <th>Nota</th>
                                <th>Retroalimentación</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var entrega in EntregasPorExamen[examen.Id])
                            {
                                <tr>
                                    <td>@entrega.Usuario.Nombre</td>
                                    <td>@entrega.Comentario</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(entrega.Link))
                                        {
                                            <a href="@entrega.Link" target="_blank" class="link-ver">Ver</a>
                                        }
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(entrega.ArchivoNombre))
                                        {
                                            <button class="btn-ver-archivo" @onclick="() => VerArchivo(entrega.ArchivoNombre, entrega.ArchivoContenido)">Ver</button>
                                        }
                                    </td>
                                    <td>
                                        <input type="number" min="0" max="100" @bind="entrega.Nota" class="input-nota" />
                                    </td>
                                    <td>
                                        <input type="text" @bind="entrega.Retroalimentacion" class="input-retro" />
                                    </td>
                                    <td>
                                        <button class="btn-guardar" @onclick="() => GuardarNota(entrega)">
                                            <i class="fas fa-save"></i> Guardar
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </details>
            </div>
        }
    }
    else if (ClaseIdSeleccionada != null)
    {
        <p class="no-data">No hay exámenes registrados en esta clase.</p>
    }
}

<style>
    .titulo {
        text-align: center;
        color: #2e7d32;
        margin-bottom: 30px;
        font-weight: 700;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .form-seleccion {
        max-width: 600px;
        margin: auto;
        margin-bottom: 25px;
    }

        .form-seleccion label {
            font-weight: 600;
            display: block;
            margin-bottom: 8px;
            color: #2e7d32;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

    .form-control {
        width: 100%;
        padding: 10px;
        border-radius: 10px;
        border: 1.5px solid black;
        background-color: white;
        color: black;
        font-size: 1rem;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

        .form-control option {
            color: black;
            background: white;
        }

    .examen-card {
        background: white;
        padding: 20px;
        margin-bottom: 25px;
        border-radius: 12px;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.12);
        border: 1.5px solid black;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

        .examen-card h4 {
            font-weight: 700;
            color: #2e7d32;
            margin-bottom: 8px;
        }

    .badge-examen {
        background: #2e7d32;
        color: white;
        padding: 5px 12px;
        border-radius: 8px;
        font-size: 0.85rem;
        font-weight: 600;
        margin-left: 12px;
    }

    .examen-card p {
        color: #222;
        font-size: 0.95rem;
        margin: 6px 0;
    }

    details summary {
        cursor: pointer;
        font-weight: 600;
        color: #2e7d32;
        margin-top: 15px;
        font-size: 1rem;
        list-style: none;
    }

        details summary::-webkit-details-marker {
            display: none;
        }

    .tabla-entregas {
        width: 100%;
        margin-top: 15px;
        border-collapse: collapse;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        background-color: white;
        border: 1.5px solid black;
        border-radius: 10px;
        overflow: hidden;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

        .tabla-entregas th, .tabla-entregas td {
            border-bottom: 1.5px solid black;
            padding: 12px;
            text-align: center;
            color: black;
        }

        .tabla-entregas th {
            background-color: #c8e6c9;
            font-weight: 700;
            border-bottom: 2px solid #2e7d32;
        }

        .tabla-entregas tbody tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .tabla-entregas tbody tr:hover {
            background-color: #dcedc8;
            cursor: default;
        }

    .link-ver {
        color: #2e7d32;
        font-weight: 600;
        text-decoration: none;
    }

        .link-ver:hover {
            text-decoration: underline;
            color: #145214;
        }

    .btn-ver-archivo {
        background: #2e7d32;
        color: white;
        border: none;
        padding: 6px 12px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

        .btn-ver-archivo:hover {
            background: #145214;
        }

    .input-nota, .input-retro {
        width: 90px;
        padding: 6px 8px;
        border-radius: 8px;
        border: 1.5px solid black;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-weight: 600;
        text-align: center;
        color: black;
    }

    .input-retro {
        width: 180px;
        text-align: left;
    }

    .btn-guardar {
        background: #2e7d32;
        color: white;
        padding: 7px 14px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 700;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        display: flex;
        align-items: center;
        gap: 6px;
        justify-content: center;
    }

        .btn-guardar i {
            font-size: 1rem;
        }

        .btn-guardar:hover {
            background: #145214;
        }

    .no-data {
        text-align: center;
        color: #999;
        margin-top: 30px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-style: italic;
        font-weight: 600;
    }
</style>

@code {
    private Usuario? UsuarioAutenticado;
    private List<Clase> Clases = new();
    private List<Tarea> Examenes = new();
    private Dictionary<int, List<EntregaTareaEstudiante>> EntregasPorExamen = new();
    private int? ClaseIdSeleccionada;

    protected override async Task OnInitializedAsync()
    {
        UsuarioAutenticado = await AuthService.VerificarSesion();
        if (UsuarioAutenticado != null)
        {
            Clases = await ClaseService.GetClasesPorProfesorAsync(UsuarioAutenticado.Nombre);
        }
    }

    private async Task OnClaseChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int claseId))
        {
            ClaseIdSeleccionada = claseId;
            await CargarExamenes();
        }
    }

    private async Task CargarExamenes()
    {
        Examenes.Clear();
        EntregasPorExamen.Clear();

        if (ClaseIdSeleccionada != null)
        {
            Examenes = await ClaseService.ObtenerExamenesPorClaseAsync(ClaseIdSeleccionada.Value);
            foreach (var ex in Examenes)
            {
                EntregasPorExamen[ex.Id] = await TareaEstudianteService.ObtenerEntregasPorTareaAsync(ex.Id);
            }
        }
    }

    private async Task GuardarNota(EntregaTareaEstudiante entrega)
    {
        await ClaseService.GuardarNotaYRetroalimentacion(entrega.Id, entrega.Nota, entrega.Retroalimentacion);
    }

    private async Task VerArchivo(string nombre, byte[] contenido)
    {
        var ext = Path.GetExtension(nombre)?.ToLower() ?? "";
        var mime = ext switch
        {
            ".pdf" => "application/pdf",
            ".jpg" or ".jpeg" => "image/jpeg",
            ".png" => "image/png",
            _ => "application/octet-stream"
        };

        using var streamRef = new DotNetStreamReference(new MemoryStream(contenido));
        await JS.InvokeVoidAsync("previewFileFromStream", mime, streamRef);
    }
}
