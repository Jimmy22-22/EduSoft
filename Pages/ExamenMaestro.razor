@page "/examenes-maestro"
@layout LayoutMaestro
@using EduSoft.Data
@using EduSoft.Services
@inject ClaseService ClaseService
@inject TareaEstudianteService TareaEstudianteService
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="header-container">
    <h2 class="titulo">
        <i class="fas fa-clipboard-list"></i> Exámenes por Clase
    </h2>
</div>

@if (UsuarioAutenticado == null)
{
    <p class="no-data">Inicia sesión para ver los exámenes.</p>
}
else
{
    <div class="form-seleccion">
        <label><i class="fas fa-book"></i> Selecciona una clase:</label>
        <select class="form-control" value="@ClaseIdSeleccionada" @onchange="OnClaseChanged">
            <option value="">-- Seleccionar --</option>
            @foreach (var clase in Clases)
            {
                <option value="@clase.Id">@clase.Nombre</option>
            }
        </select>
    </div>

    @if (Examenes.Count > 0)
    {
        <div class="contenedor-examenes">
            @foreach (var examen in Examenes)
            {
                var claseColor = ObtenerClaseColorAleatorio();
                <div class="examen-card @claseColor">
                    <h4>@examen.Titulo <span class="badge-examen">Examen</span></h4>
                    <p>@examen.Descripcion</p>
                    <p><i class="fas fa-calendar-alt"></i> Fecha entrega: @examen.FechaEntrega.ToString("dd MMM yyyy")</p>

                    <button class="btn-ver" @onclick="() => VerEntregasEnModal(examen.Id)">
                        <i class="fas fa-folder-open"></i> Ver Entregas
                    </button>
                </div>
            }
        </div>
    }
    else if (ClaseIdSeleccionada != null)
    {
        <p class="no-data">No hay exámenes registrados en esta clase.</p>
    }
}

@if (MostrarModalEntregas && EntregasModal != null)
{
    <div class="modal-overlay">
        <div class="modal-box tareas-modal">
            <div class="modal-header">
                <i class="fas fa-folder-open modal-icon"></i>
                <h2>Entregas del Examen</h2>
            </div>
            <div class="modal-content">
                <table class="tabla-entregas">
                    <thead>
                        <tr>
                            <th>Estudiante</th>
                            <th>Comentario</th>
                            <th>Link</th>
                            <th>Archivo</th>
                            <th>Nota</th>
                            <th>Retroalimentación</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var entrega in EntregasModal)
                        {
                            <tr>
                                <td>@entrega.Usuario.Nombre</td>
                                <td>@entrega.Comentario</td>
                                <td>
                                    @if (!string.IsNullOrEmpty(entrega.Link))
                                    {
                                        <a href="@entrega.Link" target="_blank" class="link-ver">Ver</a>
                                    }
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(entrega.ArchivoNombre))
                                    {
                                        <button class="btn-ver-archivo" @onclick="() => VerArchivo(entrega.ArchivoNombre, entrega.ArchivoContenido)">Ver</button>
                                    }
                                </td>
                                <td>
                                    <input type="number" min="0" max="100" @bind="entrega.Nota" class="input-nota" />
                                </td>
                                <td>
                                    <input type="text" @bind="entrega.Retroalimentacion" class="input-retro" />
                                </td>
                                <td>
                                    <button class="btn-guardar" @onclick="() => GuardarNota(entrega)">
                                        <i class="fas fa-save"></i> Guardar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button class="btn-cerrar-modal" @onclick="() => MostrarModalEntregas = false">Cerrar</button>
            </div>
        </div>
    </div>
}

<style>
    .titulo {
        text-align: center;
        color: #1565c0;
        margin-bottom: 30px;
        font-weight: 700;
    }

    .form-seleccion {
        max-width: 600px;
        margin: auto;
        margin-bottom: 25px;
    }

        .form-seleccion label {
            font-weight: 600;
            display: block;
            margin-bottom: 8px;
            color: #0d47a1;
        }

    .form-control {
        width: 100%;
        padding: 10px;
        border-radius: 10px;
        border: 2px solid #90caf9;
        background-color: #e3f2fd;
        color: #0d47a1;
    }

    .contenedor-examenes {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
    }

    .examen-card {
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.12);
    }

    .badge-examen {
        background: #1976d2;
        color: white;
        padding: 4px 10px;
        border-radius: 6px;
        font-size: 0.8rem;
    }

    details summary {
        cursor: pointer;
        margin-top: 12px;
        color: #0d47a1;
        font-weight: 600;
    }

    .tabla-entregas {
        width: 100%;
        margin-top: 10px;
        border-collapse: collapse;
    }

        .tabla-entregas th, .tabla-entregas td {
            padding: 10px;
            border-bottom: 1px solid #ccc;
            text-align: center;
        }

    .link-ver {
        color: #1976d2;
        font-weight: 600;
        text-decoration: none;
    }

    .btn-ver-archivo, .btn-guardar {
        background: #1976d2;
        color: white;
        padding: 6px 12px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
    }

    .tarjeta-rojo {
        background: #ffebee;
        border-left: 6px solid #e53935;
    }

    .tarjeta-azul {
        background: #e3f2fd;
        border-left: 6px solid #1e88e5;
    }

    .tarjeta-amarillo {
        background: #fffde7;
        border-left: 6px solid #fdd835;
    }

    .tarjeta-naranja {
        background: #fff3e0;
        border-left: 6px solid #fb8c00;
    }

    .tarjeta-verde {
        background: #e8f5e9;
        border-left: 6px solid #43a047;
    }

    .tarjeta-violeta {
        background: #f3e5f5;
        border-left: 6px solid #8e24aa;
    }

    .tarjeta-celeste {
        background: #e0f7fa;
        border-left: 6px solid #00acc1;
    }

    .tarjeta-magenta {
        background: #fce4ec;
        border-left: 6px solid #d81b60;
    }

    .tarjeta-lima {
        background: #f9fbe7;
        border-left: 6px solid #c0ca33;
    }

    .tarjeta-rosado {
        background: #fce4ec;
        border-left: 6px solid #ec407a;
    }

    .modal-box.tareas-modal {
        width: 95%;
        max-width: 1000px;
        max-height: 90vh;
        overflow-y: auto;
        background: #e3f2fd;
        border-radius: 16px;
        padding: 30px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        animation: fadeIn 0.4s ease-out;
        position: relative;
    }

    .modal-content {
        color: #0d47a1;
        overflow-x: auto;
    }

    /* Asegura que la tabla se adapte y no rompa diseño */
    .tabla-entregas {
        width: 100%;
        min-width: 900px;
        margin-top: 10px;
        border-collapse: collapse;
        background-color: white;
        border: 2px solid #bbdefb;
        border-radius: 12px;
        overflow: hidden;
    }

        .tabla-entregas th, .tabla-entregas td {
            padding: 12px;
            border-bottom: 1px solid #e3f2fd;
            text-align: center;
            color: #0d47a1;
            font-size: 0.95rem;
        }

        .tabla-entregas th {
            background-color: #bbdefb;
            font-weight: bold;
        }

        .tabla-entregas tbody tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .tabla-entregas tbody tr:hover {
            background-color: #e3f2fd;
            cursor: default;
        }

    .input-nota, .input-retro {
        padding: 6px 10px;
        border-radius: 6px;
        border: 2px solid #90caf9;
        background: white;
        color: #0d47a1;
        font-weight: 600;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .input-retro {
        width: 180px;
    }

    .link-ver {
        color: #1976d2;
        font-weight: 600;
        text-decoration: none;
    }

        .link-ver:hover {
            text-decoration: underline;
        }

    .btn-ver-archivo, .btn-guardar {
        background: #1e88e5;
        color: white;
        padding: 7px 12px;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-ver-archivo:hover, .btn-guardar:hover {
            background: #1565c0;
        }

    .btn-ver {
        background: #1e88e5;
        color: white;
        border: none;
        padding: 10px 16px;
        border-radius: 10px;
        font-weight: 600;
        font-size: 0.95rem;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-ver:hover {
            background: #1565c0;
        }

    .btn-cerrar-modal {
        background-color: #dd0300;
        color: white;
        padding: 8px 20px;
        margin: 10px auto 0 auto; /* 👈 Esto lo centra */
        display: block; /* 👈 Necesario para que el margin funcione */
        border-radius: 8px;
        border: none;
        font-weight: 600;
        font-size: 0.95rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-cerrar-modal:hover {
            background-color: #ff0300;
        }

        .btn-ver i, .btn-cerrar-modal i {
            font-size: 1rem;
        }

    select.form-control {
        background-color: #e3f2fd;
        color: #0d47a1;
        border: 2px solid #90caf9;
        border-radius: 10px;
        padding: 10px;
        font-weight: 600;
        font-size: 0.95rem;
        appearance: none; /* Quita el estilo nativo */
        -webkit-appearance: none;
        -moz-appearance: none;
        background-image: url('data:image/svg+xml;utf8,<svg fill="%230d47a1" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M7 10l5 5 5-5z"/></svg>');
        background-repeat: no-repeat;
        background-position-x: calc(100% - 10px);
        background-position-y: center;
    }

        select.form-control option {
            background-color: #e3f2fd;
            color: #0d47a1;
            font-weight: 500;
        }

    .header-container {
        background: linear-gradient(90deg, #e3f2fd, #bbdefb);
        padding: 16px 24px;
        border-radius: 14px;
        box-shadow: 0 4px 10px rgba(21, 101, 192, 0.12);
        margin: 0 auto 30px auto;
        max-width: 700px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .titulo {
        text-align: center;
        color: #003dd3;
        font-size: 2.2rem;
        font-weight: bold;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 12px;
    }
</style>

@code {
    private Usuario? UsuarioAutenticado;
    private List<Clase> Clases = new();
    private List<Tarea> Examenes = new();
    private Dictionary<int, List<EntregaTareaEstudiante>> EntregasPorExamen = new();
    private List<EntregaTareaEstudiante>? EntregasModal;
    private int? ClaseIdSeleccionada;
    private bool MostrarModalEntregas = false;

    protected override async Task OnInitializedAsync()
    {
        UsuarioAutenticado = await AuthService.VerificarSesion();
        if (UsuarioAutenticado != null)
        {
            Clases = await ClaseService.GetClasesPorProfesorAsync(UsuarioAutenticado.Nombre);
        }
    }

    private async Task OnClaseChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int claseId))
        {
            ClaseIdSeleccionada = claseId;
            await CargarExamenes();
        }
    }

    private async Task CargarExamenes()
    {
        Examenes.Clear();
        EntregasPorExamen.Clear();

        if (ClaseIdSeleccionada != null)
        {
            Examenes = await ClaseService.ObtenerExamenesPorClaseAsync(ClaseIdSeleccionada.Value);
            foreach (var ex in Examenes)
            {
                EntregasPorExamen[ex.Id] = await TareaEstudianteService.ObtenerEntregasPorTareaAsync(ex.Id);
            }
        }
    }

    private async Task VerEntregasEnModal(int examenId)
    {
        if (EntregasPorExamen.TryGetValue(examenId, out var entregas))
        {
            EntregasModal = entregas;
            MostrarModalEntregas = true;
        }
    }

    private async Task GuardarNota(EntregaTareaEstudiante entrega)
    {
        await ClaseService.GuardarNotaYRetroalimentacion(entrega.Id, entrega.Nota, entrega.Retroalimentacion);
    }

    private async Task VerArchivo(string nombre, byte[] contenido)
    {
        var ext = Path.GetExtension(nombre)?.ToLower() ?? "";
        var mime = ext switch
        {
            ".pdf" => "application/pdf",
            ".jpg" or ".jpeg" => "image/jpeg",
            ".png" => "image/png",
            _ => "application/octet-stream"
        };

        using var streamRef = new DotNetStreamReference(new MemoryStream(contenido));
        await JS.InvokeVoidAsync("previewFileFromStream", mime, streamRef);
    }

    private string ObtenerClaseColorAleatorio()
    {
        var clases = new List<string>
    {
        "tarjeta-rojo",
        "tarjeta-azul",
        "tarjeta-amarillo",
        "tarjeta-naranja",
        "tarjeta-verde",
        "tarjeta-violeta",
        "tarjeta-celeste",
        "tarjeta-magenta",
        "tarjeta-lima",
        "tarjeta-rosado"
    };

        var random = new Random();
        int index = random.Next(clases.Count);
        return clases[index];
    }
}
