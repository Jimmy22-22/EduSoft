@page "/eduai"
@using EduSoft.Data
@inject CHATBOT.Services.GeminiService ChatService

<div class="chat-wrapper">
    <div class="chat-title">🤖 EDU AI</div>

    <div class="chat-box">
        @foreach (var msg in mensajes)
        {
            var esUsuario = msg.Role == "user";
            <div class="message @(esUsuario ? "user" : "assistant")">
                <div class="avatar-container">
                    @if (!esUsuario)
                    {
                        <div class="avatar">🤖</div>
                    }
                </div>
                <div class="bubble">@msg.Content</div>
                <div class="avatar-container">
                    @if (esUsuario)
                    {
                        <div class="avatar">🧑</div>
                    }
                </div>
            </div>
        }
    </div>

    <div class="chat-input-area">
        <input @bind="mensajeUsuario" @bind:event="oninput" placeholder="Escribe tu mensaje..." class="chat-input" />
        <button @onclick="EnviarMensaje" class="chat-send-button">
            <i class="fas fa-paper-plane"></i>
        </button>
    </div>
</div>

<style>
    html, body {
        margin: 0;
        padding: 0;
        height: 100%;
        width: 100%;
    }

    .chat-wrapper {
        display: flex;
        flex-direction: column;
        height: 100vh;
        width: 100vw;
        margin: 0;
        padding: 25px;
        background: #f0fff5;
        box-sizing: border-box;
    }


    .chat-title {
        text-align: center;
        font-size: 1.8rem;
        color: #16A085;
        margin-bottom: 20px;
        font-weight: bold;
    }

    .chat-box {
        flex-grow: 1;
        overflow-y: auto;
        padding: 15px;
        background: #ffffff;
        border-radius: 10px;
        margin-bottom: 15px;
    }

    .message {
        display: flex;
        justify-content: flex-start;
        margin-bottom: 10px;
    }

        .message.user {
            justify-content: flex-end;
        }

    .bubble-container {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .message.user .bubble-container {
        flex-direction: row-reverse;
    }

    .avatar {
        font-size: 1.5rem;
    }

    .bubble {
        background-color: #D1F2EB;
        padding: 10px 15px;
        border-radius: 15px;
        max-width: 50%;
        font-size: 1rem;
        color: #0E6251;
    }

    .message.user .bubble {
        background-color: #AED6F1;
        color: #1B4F72;
    }

    .chat-input-area {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .chat-input {
        flex-grow: 1;
        padding: 12px;
        font-size: 1rem;
        border-radius: 10px;
        border: 1px solid #ccc;
        outline: none;
    }

    .chat-send-button {
        background: #16A085;
        color: white;
        padding: 12px 18px;
        font-size: 1rem;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        transition: background 0.3s;
    }

        .chat-send-button:hover {
            background: #138D75;
        }
</style>

@code {
    private string mensajeUsuario;
    private List<ChatMessage> mensajes = new();

    private async Task EnviarMensaje()
    {
        if (!string.IsNullOrWhiteSpace(mensajeUsuario))
        {
            var respuesta = await ChatService.SendMessageAsync(mensajeUsuario);
            mensajes.Clear();
            mensajes.AddRange(ChatService.Messages);
            mensajeUsuario = string.Empty;
        }
    }
}
