@page "/tarea-detalle/{TareaId:int}"

@layout LayoutMaestro
@using EduSoft.Data
@using EduSoft.Services
@inject ClaseService ClaseService
@inject TareaEstudianteService TareaEstudianteService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="tarea-detalle-container">
    <div class="tarea-box">
        <h2 class="tarea-titulo"><i class="fas fa-book"></i> @Tarea?.Titulo</h2>

        @if (Tarea != null)
        {
            <div class="detalle-tarea-card">
                <h4><i class="fas fa-info-circle"></i> Detalles de la Tarea</h4>

                <div class="detalle-item">
                    <i class="fas fa-align-left iconito"></i>
                    <strong>Descripción:</strong>
                    <span>@Tarea.Descripcion</span>
                </div>

                <div class="detalle-item">
                    <i class="fas fa-calendar-alt iconito"></i>
                    <strong>Fecha de Entrega:</strong>
                    <span>@Tarea.FechaEntrega.ToString("dd MMM yyyy")</span>
                </div>

                @if (!string.IsNullOrWhiteSpace(Tarea?.Link))
                {
                    string linkFinal = Tarea.Link.StartsWith("http") ? Tarea.Link : $"https://{Tarea.Link}";
                    <div class="detalle-item">
                        <i class="fas fa-link iconito"></i>
                        <strong>Enlace:</strong>
                        <a href="@linkFinal" target="_blank">@linkFinal</a>
                    </div>
                }

                @if (Tarea.ArchivoNombre != null && Tarea.ArchivoContenido != null)
                {
                    <div class="detalle-item">
                        <i class="fas fa-file-alt iconito"></i>
                        <strong>Archivo:</strong>
                        <button class="descargar-btn" @onclick="DescargarOVisualizar">
                            <i class="fas fa-file-download"></i> Abrir @Tarea.ArchivoNombre
                        </button>
                    </div>
                }

                <button class="btn-volver" @onclick="VolverAClase">
                    <i class="fas fa-arrow-left"></i> Volver a la clase
                </button>
            </div>

            <div class="stats-bar">
                <div class="stat-box">
                    <i class="fas fa-user-check"></i>
                    <div>
                        <p class="stat-label">Entregas Recibidas</p>
                        <p class="stat-value">@Entregas.Count</p>
                    </div>
                </div>
                <div class="stat-box">
                    <i class="fas fa-clock"></i>
                    <div>
                        <p class="stat-label">Pendientes</p>
                        <p class="stat-value">@(Entregas.Count(e => e.Nota == null))</p>
                    </div>
                </div>
            </div>

            <div class="entrega-section">
                <button class="toggle-entregas-btn" @onclick="() => MostrarEntregas = !MostrarEntregas">
                    <i class="fas @(MostrarEntregas ? "fa-chevron-up" : "fa-chevron-down")"></i>
                    @(MostrarEntregas ? "Ocultar Entregas de Estudiantes" : "Mostrar Entregas de Estudiantes")
                </button>

                @if (MostrarEntregas)
                {
                    <h3 class="entregas-titulo"><i class="fas fa-users"></i> Entregas</h3>

                    @if (Entregas.Count > 0)
                    {
                        <div class="entregas-grid">
                            @foreach (var entrega in Entregas)
                            {
                                <div class="entrega-card">
                                    <p><strong><i class="fas fa-user"></i> Estudiante:</strong> @entrega.Usuario.Nombre</p>
                                    <p><strong><i class="fas fa-clock"></i> Fecha de Entrega:</strong> @entrega.FechaEntrega.ToString("dd MMM yyyy HH:mm")</p>

                                    @if (!string.IsNullOrEmpty(entrega.Comentario))
                                    {
                                        <p><strong><i class="fas fa-comment-dots"></i> Comentario:</strong> @entrega.Comentario</p>
                                    }

                                    @if (!string.IsNullOrEmpty(entrega.Link))
                                    {
                                        string linkEntrega = entrega.Link.StartsWith("http") ? entrega.Link : $"https://{entrega.Link}";
                                        <p><strong><i class="fas fa-link"></i> Enlace:</strong> <a href="@linkEntrega" target="_blank">@linkEntrega</a></p>
                                    }

                                    @if (!string.IsNullOrEmpty(entrega.ArchivoNombre))
                                    {
                                        <button class="descargar-btn" @onclick="() => DescargarOVisualizarEntrega(entrega.ArchivoNombre, entrega.ArchivoContenido)">
                                            <i class="fas fa-file-download"></i> @entrega.ArchivoNombre
                                        </button>
                                    }

                                    <textarea class="input-textarea" placeholder="Retroalimentación" @bind="entrega.Retroalimentacion"></textarea>
                                    <input class="input-nota" type="number" step="0.1" min="0" max="100" @bind="entrega.Nota" placeholder="Nota (0-100)" />
                                    <button class="btn-guardar" @onclick="() => GuardarRetroalimentacion(entrega)">
                                        <i class="fas fa-save"></i> Guardar
                                    </button>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="no-data">Aún no hay entregas.</p>
                    }
                }
            </div>
        }
        else
        {
            <p class="no-data">Tarea no encontrada.</p>
        }
    </div>
</div>

<style>
    .tarea-detalle-container {
        background: #f7faff;
        padding: 30px 15px;
    }

    .tarea-box {
        background: #ffffff;
        padding: 30px;
        max-width: 1100px;
        margin: 0 auto;
        border-radius: 16px;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    }

    .tarea-titulo {
        color: #1976d2;
        text-align: center;
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .tarea-info p {
        font-size: 1rem;
        margin-bottom: 10px;
    }

    .btn-volver, .btn-guardar {
        margin-top: 20px;
        background: #1976d2;
        color: white;
        padding: 10px 25px;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        font-weight: 600;
    }

    .descargar-btn {
        background: #4a89dc;
        color: white;
        padding: 8px 20px;
        border-radius: 8px;
        border: none;
        margin-top: 10px;
    }

    .stats-bar {
        display: flex;
        justify-content: space-evenly;
        background: #eef7ff;
        border-radius: 12px;
        padding: 20px;
        margin: 30px 0;
    }

    .stat-box {
        text-align: center;
    }

        .stat-box i {
            font-size: 1.8rem;
            color: #1976d2;
            margin-bottom: 5px;
        }

    .stat-label {
        font-size: 0.9rem;
        color: #555;
    }

    .stat-value {
        font-size: 1.4rem;
        font-weight: bold;
    }

    .toggle-entregas-btn {
        background: none;
        border: none;
        font-size: 1rem;
        color: #1976d2;
        margin-bottom: 20px;
        cursor: pointer;
    }

    .entregas-titulo {
        color: #0d47a1;
        font-size: 1.5rem;
        text-align: center;
        margin: 20px 0;
    }

    .entregas-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 20px;
    }

    .entrega-card {
        background: #f9fbfe;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .input-textarea, .input-nota {
        width: 100%;
        padding: 10px;
        margin-top: 12px;
        border-radius: 8px;
        border: 1px solid #ccc;
    }

    .no-data {
        text-align: center;
        margin-top: 20px;
        color: #888;
        font-style: italic;
    }

    .detalle-tarea-card {
        background: #f0f7ff;
        border-left: 5px solid #1976d2;
        border-radius: 12px;
        padding: 20px 25px;
        margin: 25px 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

        .detalle-tarea-card h4 {
            color: #1565c0;
            margin-bottom: 15px;
            font-weight: 700;
            font-size: 1.3rem;
        }

    .detalle-item {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
        font-size: 0.95rem;
    }

        .detalle-item strong {
            margin-right: 6px;
            min-width: 150px;
            color: #333;
        }

        .detalle-item span, .detalle-item a {
            color: #555;
        }

    .iconito {
        margin-right: 8px;
        color: #1e88e5;
        font-size: 1.1rem;
        width: 20px;
    }
</style>

@code {
    [Parameter] public int TareaId { get; set; }
    private Tarea? Tarea;
    private List<EntregaTareaEstudiante> Entregas = new();
    private bool MostrarEntregas = false;

    protected override async Task OnInitializedAsync()
    {
        Tarea = await ClaseService.GetTareaPorIdAsync(TareaId);
        if (Tarea != null)
        {
            Entregas = await TareaEstudianteService.ObtenerEntregasPorTareaAsync(Tarea.Id);
        }
    }

    private async Task DescargarOVisualizar()
    {
        if (Tarea?.ArchivoContenido != null && Tarea.ArchivoNombre != null)
        {
            var mime = ObtenerMimeType(Tarea.ArchivoNombre);
            using var stream = new MemoryStream(Tarea.ArchivoContenido);
            using var dotNetStream = new DotNetStreamReference(stream);

            if (EsPreviewable(Tarea.ArchivoNombre))
                await JS.InvokeVoidAsync("previewFileFromStream", mime, dotNetStream);
            else
                await JS.InvokeVoidAsync("downloadFileFromStream", Tarea.ArchivoNombre, mime, dotNetStream);
        }
    }

    private async Task DescargarOVisualizarEntrega(string nombreArchivo, byte[] contenido)
    {
        var mime = ObtenerMimeType(nombreArchivo);
        using var stream = new MemoryStream(contenido);
        using var dotNetStream = new DotNetStreamReference(stream);

        if (EsPreviewable(nombreArchivo))
            await JS.InvokeVoidAsync("previewFileFromStream", mime, dotNetStream);
        else
            await JS.InvokeVoidAsync("downloadFileFromStream", nombreArchivo, mime, dotNetStream);
    }

    private bool EsPreviewable(string nombre)
    {
        var ext = Path.GetExtension(nombre)?.ToLower();
        return ext is ".pdf" or ".jpg" or ".jpeg" or ".png" or ".gif";
    }

    private string ObtenerMimeType(string nombreArchivo)
    {
        var ext = Path.GetExtension(nombreArchivo)?.ToLower() ?? "";
        return ext switch
        {
            ".pdf" => "application/pdf",
            ".doc" => "application/msword",
            ".docx" => "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            ".xls" => "application/vnd.ms-excel",
            ".xlsx" => "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            ".png" => "image/png",
            ".jpg" or ".jpeg" => "image/jpeg",
            ".gif" => "image/gif",
            ".txt" => "text/plain",
            _ => "application/octet-stream"
        };
    }

    private async Task GuardarRetroalimentacion(EntregaTareaEstudiante entrega)
    {
        await TareaEstudianteService.ActualizarRetroalimentacionYNotaAsync(entrega);
    }

    private void VolverAClase()
    {
        if (Tarea != null)
            Navigation.NavigateTo($"/clase-maestro/{Tarea.ClaseId}");
    }
}
