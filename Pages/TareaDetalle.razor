@page "/tarea-detalle/{TareaId:int}"

@layout LayoutMaestro
@using EduSoft.Data
@using EduSoft.Services
@inject ClaseService ClaseService
@inject TareaEstudianteService TareaEstudianteService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h2 class="tarea-titulo">@Tarea?.Titulo</h2>

@if (Tarea != null)
{
    <div class="tarea-detalle-box">
        <p><strong>Descripción:</strong> @Tarea.Descripcion</p>
        <p><strong>Fecha de Entrega:</strong> @Tarea.FechaEntrega.ToString("dd MMM yyyy")</p>

        @if (!string.IsNullOrWhiteSpace(Tarea.Link))
        {
            <p><strong>Enlace:</strong> <a href="@Tarea.Link" target="_blank">@Tarea.Link</a></p>
        }

        @if (Tarea.ArchivoNombre != null && Tarea.ArchivoContenido != null)
        {
            <p>
                <strong>Archivo:</strong>
                <button class="descargar-btn" @onclick="DescargarOVisualizar">
                    <i class="fas fa-file-alt"></i> Abrir @Tarea.ArchivoNombre
                </button>
            </p>
        }

        <button class="btn-volver" @onclick="VolverAClase">
            <i class="fas fa-arrow-left"></i> Volver a la clase
        </button>
    </div>

    <hr />

    <h3 class="entregas-titulo"><i class="fas fa-user-check"></i> Entregas de Estudiantes</h3>
    @if (Entregas.Count > 0)
    {
        @foreach (var entrega in Entregas)
        {
            <div class="entrega-card">
                <p><strong>Estudiante:</strong> @entrega.Usuario.Nombre</p>
                <p><strong>Fecha de Entrega:</strong> @entrega.FechaEntrega.ToString("dd MMM yyyy HH:mm")</p>
                @if (!string.IsNullOrEmpty(entrega.Comentario))
                {
                    <p><strong>Comentario:</strong> @entrega.Comentario</p>
                }
                @if (!string.IsNullOrEmpty(entrega.Link))
                {
                    <p><strong>Enlace:</strong> <a href="@entrega.Link" target="_blank">@entrega.Link</a></p>
                }
                @if (!string.IsNullOrEmpty(entrega.ArchivoNombre))
                {
                    <button class="descargar-btn" @onclick="() => DescargarOVisualizarEntrega(entrega.ArchivoNombre, entrega.ArchivoContenido)">
                        <i class="fas fa-file-download"></i> Ver/Descargar @entrega.ArchivoNombre
                    </button>
                }
                <textarea class="input-textarea" placeholder="Retroalimentación" @bind="entrega.Retroalimentacion"></textarea>
                <input class="input-nota" type="number" step="0.1" min="0" max="100" @bind="entrega.Nota" placeholder="Nota (0-100)" />
                <button class="btn-guardar" @onclick="() => GuardarRetroalimentacion(entrega)"><i class="fas fa-save"></i> Guardar</button>
            </div>
        }
    }
    else
    {
        <p class="no-data">Aún no hay entregas.</p>
    }
}
else
{
    <p class="no-data">Tarea no encontrada.</p>
}

<style>
    .tarea-titulo {
        color: #1e88e5;
        text-align: center;
        margin-top: 20px;
        font-size: 2rem;
    }

    .tarea-detalle-box {
        background: #f1f1f1;
        padding: 20px;
        max-width: 600px;
        margin: auto;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .btn-volver, .btn-guardar {
        margin-top: 20px;
        background: #607d8b;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
    }

    .descargar-btn {
        background: #43a047;
        color: white;
        border: none;
        padding: 8px 15px;
        border-radius: 6px;
        cursor: pointer;
        margin-top: 5px;
    }

    .entrega-card {
        background: #f9f9f9;
        padding: 20px;
        margin: 15px auto;
        border-radius: 10px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        max-width: 700px;
    }

    .input-textarea, .input-nota {
        width: 100%;
        padding: 8px;
        margin-top: 10px;
        border-radius: 6px;
        border: 1px solid #ccc;
    }

    .entregas-titulo {
        text-align: center;
        color: #1565c0;
        margin-top: 30px;
        margin-bottom: 10px;
    }

    .no-data {
        text-align: center;
        margin-top: 40px;
        color: #888;
        font-size: 1.2rem;
    }
</style>

@code {
    [Parameter] public int TareaId { get; set; }
    private Tarea? Tarea;
    private List<EntregaTareaEstudiante> Entregas = new();

    protected override async Task OnInitializedAsync()
    {
        Tarea = await ClaseService.GetTareaPorIdAsync(TareaId);
        if (Tarea != null)
        {
            Entregas = await TareaEstudianteService.ObtenerEntregasPorTareaAsync(Tarea.Id);
        }
    }

    private async Task DescargarOVisualizar()
    {
        if (Tarea?.ArchivoContenido != null && Tarea.ArchivoNombre != null)
        {
            var mime = ObtenerMimeType(Tarea.ArchivoNombre);
            using var stream = new MemoryStream(Tarea.ArchivoContenido);
            using var dotNetStream = new DotNetStreamReference(stream);

            if (EsPreviewable(Tarea.ArchivoNombre))
            {
                await JS.InvokeVoidAsync("previewFileFromStream", mime, dotNetStream);
            }
            else
            {
                await JS.InvokeVoidAsync("downloadFileFromStream", Tarea.ArchivoNombre, mime, dotNetStream);
            }
        }
    }

    private async Task DescargarOVisualizarEntrega(string nombreArchivo, byte[] contenido)
    {
        var mime = ObtenerMimeType(nombreArchivo);
        using var stream = new MemoryStream(contenido);
        using var dotNetStream = new DotNetStreamReference(stream);

        if (EsPreviewable(nombreArchivo))
        {
            await JS.InvokeVoidAsync("previewFileFromStream", mime, dotNetStream);
        }
        else
        {
            await JS.InvokeVoidAsync("downloadFileFromStream", nombreArchivo, mime, dotNetStream);
        }
    }

    private bool EsPreviewable(string nombre)
    {
        var ext = Path.GetExtension(nombre)?.ToLower();
        return ext is ".pdf" or ".jpg" or ".jpeg" or ".png" or ".gif";
    }

    private string ObtenerMimeType(string nombreArchivo)
    {
        var ext = Path.GetExtension(nombreArchivo)?.ToLower() ?? "";
        return ext switch
        {
            ".pdf" => "application/pdf",
            ".doc" => "application/msword",
            ".docx" => "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            ".xls" => "application/vnd.ms-excel",
            ".xlsx" => "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            ".png" => "image/png",
            ".jpg" or ".jpeg" => "image/jpeg",
            ".gif" => "image/gif",
            ".txt" => "text/plain",
            _ => "application/octet-stream"
        };
    }

    private async Task GuardarRetroalimentacion(EntregaTareaEstudiante entrega)
    {
        await TareaEstudianteService.ActualizarRetroalimentacionYNotaAsync(entrega);
    }

    private void VolverAClase()
    {
        if (Tarea != null)
            Navigation.NavigateTo($"/clase-maestro/{Tarea.ClaseId}");
    }
}