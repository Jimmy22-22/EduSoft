@page "/examenes-estudiante"
@layout LayoutEstudiante
@using EduSoft.Data
@using EduSoft.Services
@inject AuthService AuthService
@inject ClaseService ClaseService
@inject NavigationManager Navigation

<h2 class="titulo"><i class="fas fa-file-signature"></i> Exámenes Asignados</h2>

@if (UsuarioAutenticado == null)
{
    <p class="no-data">Debes iniciar sesión para ver tus exámenes.</p>
}
else
{
    @if (ExamenesAgrupados.Count == 0)
    {
        <p class="no-data">No tienes exámenes asignados.</p>
    }
    else
    {
        @foreach (var grupo in ExamenesAgrupados)
        {
            <div class="clase-box">
                <h3><i class="fas fa-chalkboard-teacher"></i> @grupo.Key</h3>
                @foreach (var examen in grupo.Value)
                {
                    <div class="tarea-card">
                        <h4>@examen.Titulo <span class="badge-examen">Examen</span></h4>
                        <p>@examen.Descripcion</p>
                        <p><i class="fas fa-calendar-alt"></i> Fecha límite: @examen.FechaEntrega.ToString("dd MMM yyyy")</p>

                        <a class="btn-ver" href="@($"/tarea-detalle-estudiante/{examen.Id}")">
                            <i class="fas fa-eye"></i> Ver Detalles
                        </a>
                    </div>
                }
            </div>
        }
    }
}

<style>
    .titulo {
        text-align: center;
        color: #2c3e50;
        margin-bottom: 30px;
    }

    .clase-box {
        margin-bottom: 30px;
        background: #e8f0fe;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.05);
    }

    .tarea-card {
        background: white;
        padding: 15px;
        border-radius: 10px;
        margin-top: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

        .tarea-card h4 {
            margin: 0;
            color: #d32f2f;
        }

        .tarea-card p {
            margin: 6px 0;
            color: #444;
        }

    .badge-examen {
        background: #d32f2f;
        color: white;
        padding: 4px 8px;
        border-radius: 5px;
        font-size: 0.75rem;
        margin-left: 10px;
    }

    .btn-ver {
        margin-top: 10px;
        display: inline-block;
        background: #1976d2;
        color: white;
        padding: 8px 12px;
        border-radius: 6px;
        text-decoration: none;
        transition: background 0.3s;
    }

        .btn-ver:hover {
            background: #0d47a1;
        }

    .no-data {
        text-align: center;
        color: #888;
        margin-top: 40px;
    }
</style>

@code {
    private Usuario? UsuarioAutenticado;
    private Dictionary<string, List<Tarea>> ExamenesAgrupados = new();

    protected override async Task OnInitializedAsync()
    {
        UsuarioAutenticado = await AuthService.VerificarSesion();

        if (UsuarioAutenticado != null)
        {
            var clases = await ClaseService.GetClasesPorEstudianteAsync(UsuarioAutenticado.Id);

            foreach (var clase in clases)
            {
                var examenes = await ClaseService.ObtenerExamenesPorClaseAsync(clase.Id);
                if (examenes.Any())
                {
                    ExamenesAgrupados[clase.Nombre] = examenes;
                }
            }
        }
    }
}
