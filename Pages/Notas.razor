@page "/notas-maestro"
@using EduSoft.Data
@using EduSoft.Services
@inject ClaseService ClaseService
@layout LayoutMaestro

@inject AuthService AuthService
@inject NavigationManager NavigationManager

<h2 class="page-title"><i class="fas fa-graduation-cap"></i> Calificaciones por Clase</h2>

@if (ClasesConNotas != null && ClasesConNotas.Any())
{
    foreach (var claseNotas in ClasesConNotas)
    {
        var colorClase = ObtenerClaseColorOrdenado(claseNotas.Clase.Id);
        var colorFondoThead = colorClase switch
        {
            "tarjeta-rojo" => "#e53935",
            "tarjeta-azul" => "#1e88e5",
            "tarjeta-amarillo" => "#fdd835",
            "tarjeta-naranja" => "#fb8c00",
            "tarjeta-verde" => "#43a047",
            "tarjeta-violeta" => "#8e24aa",
            "tarjeta-celeste" => "#00acc1",
            "tarjeta-magenta" => "#d81b60",
            "tarjeta-lima" => "#c0ca33",
            "tarjeta-rosado" => "#ec407a",
            _ => "#4a89dc"
        };

        <div class="clase-container @colorClase">
            <h3 class="clase-title">
                <i class="fas fa-book icono-clase" style="color:@colorFondoThead"></i> @claseNotas.Clase.Nombre
            </h3>

            @if (claseNotas.NotasEstudiantes != null && claseNotas.NotasEstudiantes.Any())
            {
                <div class="table-container">
                    <table class="table-notas">
                        <thead style="background-color:@colorFondoThead; color:white;">
                            <tr>
                                <th>Estudiante</th>
                                @foreach (var tarea in claseNotas.Tareas)
                                {
                                    <th>@tarea.Titulo</th>
                                }
                                <th>Promedio</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var notaEst in claseNotas.NotasEstudiantes)
                            {
                                var promedio = notaEst.Notas
                                .Where(n => n.Nota.HasValue)
                                .Select(n => (double)n.Nota!.Value)
                                .DefaultIfEmpty()
                                .Average();


                                <tr>
                                    <td>@notaEst.NombreEstudiante</td>
                                    @foreach (var tarea in claseNotas.Tareas)
                                    {
                                        var nota = notaEst.Notas.FirstOrDefault(n => n.TareaId == tarea.Id)?.Nota;
                                        <td>@(nota.HasValue ? nota.Value.ToString("F2") : "N/A")</td>
                                    }
                                    <td class="@ObtenerClasePromedioColor(promedio)">
                                        @(notaEst.Notas.Any(n => n.Nota.HasValue)
                                            ? promedio.ToString("F2")
                                            : "N/A")
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <p class="no-data">No hay calificaciones disponibles para esta clase.</p>
            }
        </div>
    }
}
else
{
    <p class="no-data">Aún no has creado ninguna clase con calificaciones.</p>
}



<style>
    .page-title {
        text-align: center;
        color: #4a89dc;
        margin-bottom: 40px;
        font-weight: 700;
        font-size: 2rem;
        background: #eef6ff;
        padding: 15px;
        border-radius: 12px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
    }

    .clase-container {
        margin-bottom: 40px;
        background: #ffffff;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(74, 137, 220, 0.15);
        border-left: 5px solid #4a89dc;
    }

    .clase-title {
        color: #000;
        font-size: 1.4rem;
        font-weight: 600;
        margin-bottom: 20px;
        border-bottom: 2px solid #cde5fa;
        padding-bottom: 10px;
    }

    .table-container {
        overflow-x: auto;
        border-radius: 12px;
        background-color: #f8fbff;
    }

    .table-notas {
        width: 100%;
        border-collapse: collapse;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

        .table-notas thead {
            background-color: #4a89dc;
            color: white;
        }

            .table-notas thead th {
                padding: 12px 16px;
                font-weight: 600;
                text-align: left;
            }

        .table-notas tbody tr {
            background-color: #eaf2fb;
            transition: background-color 0.2s ease;
        }

            .table-notas tbody tr:hover {
                background-color: #dbe9f9;
            }

        .table-notas tbody td {
            padding: 12px 16px;
            color: #2c3e50;
            font-size: 0.95rem;
            border-top: 1px solid #d0e2f3;
        }

    .no-data {
        text-align: center;
        font-style: italic;
        color: #7faee7;
        margin-top: 40px;
        font-size: 1.1rem;
    }

    /* Ya las tienes, pero asegúrate de incluirlas en esta vista también */
    .tarjeta-rojo {
        border-left: 6px solid #e53935;
        background: #ffebee;
    }

    .tarjeta-azul {
        border-left: 6px solid #1e88e5;
        background: #e3f2fd;
    }

    .tarjeta-amarillo {
        border-left: 6px solid #fdd835;
        background: #fffde7;
    }

    .tarjeta-naranja {
        border-left: 6px solid #fb8c00;
        background: #fff3e0;
    }

    .tarjeta-verde {
        border-left: 6px solid #43a047;
        background: #e8f5e9;
    }

    .tarjeta-violeta {
        border-left: 6px solid #8e24aa;
        background: #f3e5f5;
    }

    .tarjeta-celeste {
        border-left: 6px solid #00acc1;
        background: #e0f7fa;
    }

    .tarjeta-magenta {
        border-left: 6px solid #d81b60;
        background: #fce4ec;
    }

    .tarjeta-lima {
        border-left: 6px solid #c0ca33;
        background: #f9fbe7;
    }

    .tarjeta-rosado {
        border-left: 6px solid #ec407a;
        background: #fce4ec;
    }

    .promedio-verde {
        color: #2e7d32;
        font-weight: bold;
    }

    .promedio-amarillo {
        color: #fbc02d;
        font-weight: bold;
    }

    .promedio-rojo {
        color: #c62828;
        font-weight: bold;
    }

    .icono-clase {
        margin-right: 8px;
    }

    .table-container {
        overflow-x: auto;
        border-radius: 12px;
        background-color: white;
    }

    .table-notas {
        width: 100%;
        border-collapse: collapse;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: white;
    }

        .table-notas thead th {
            padding: 12px 16px;
            font-weight: 600;
            text-align: left;
            border-bottom: 2px solid #ddd;
        }

        .table-notas tbody tr {
            background-color: white;
            transition: background-color 0.2s ease;
        }

            .table-notas tbody tr:hover {
                background-color: #f5f5f5;
            }

        .table-notas tbody td {
            padding: 12px 16px;
            color: #2c3e50;
            font-size: 0.95rem;
            border-top: 1px solid #e0e0e0;
        }

</style>

@code {
    private Usuario? UsuarioAutenticado;

    private List<ClaseNotasDto> ClasesConNotas = new();

    private Dictionary<int, string> ColoresPorClaseId = new();

    protected override async Task OnInitializedAsync()
    {
        UsuarioAutenticado = await AuthService.VerificarSesion();

        if (UsuarioAutenticado != null)
        {
            var clases = await ClaseService.GetClasesPorProfesorAsync(UsuarioAutenticado.Nombre);

            foreach (var clase in clases)
            {
                var tareas = await ClaseService.ObtenerTareasPorClaseAsync(clase.Id);
                var notas = await ClaseService.ObtenerNotasPorClaseAsync(clase.Id);

                ClasesConNotas.Add(new ClaseNotasDto
                    {
                        Clase = clase,
                        Tareas = tareas,
                        NotasEstudiantes = notas
                    });
            }
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private class ClaseNotasDto
    {
        public Clase Clase { get; set; } = new();
        public List<Tarea> Tareas { get; set; } = new();
        public List<NotaEstudianteDto> NotasEstudiantes { get; set; } = new();
    }

    private readonly List<string> ColoresEnOrden = new()
{
    "tarjeta-rojo", "tarjeta-azul", "tarjeta-amarillo", "tarjeta-naranja",
    "tarjeta-verde", "tarjeta-violeta", "tarjeta-celeste", "tarjeta-magenta",
    "tarjeta-lima", "tarjeta-rosado"
};

    private string ObtenerClaseColorOrdenado(int claseId)
    {
        if (!ColoresPorClaseId.ContainsKey(claseId))
        {
            var index = ColoresPorClaseId.Count % ColoresEnOrden.Count;
            ColoresPorClaseId[claseId] = ColoresEnOrden[index];
        }
        return ColoresPorClaseId[claseId];
    }

    private string ObtenerClasePromedioColor(double promedio)
    {
        if (promedio >= 85) return "promedio-verde";
        else if (promedio >= 70) return "promedio-amarillo";
        else return "promedio-rojo";
    }


}
